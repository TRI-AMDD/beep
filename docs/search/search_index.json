{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>BEEP is a set of tools designed to support Battery Evaluation and Early Prediction of cycle life corresponding to the research of the d3batt program and the Toyota Research Institute.</p> <p>BEEP enables parsing and handling of electrochemical battery cycling data via data objects reflecting cycling run data, experimental protocols, featurization, and modeling of cycle life with machine learning.  Currently BEEP supports:</p> <ul> <li>Arbin Instruments cyclers</li> <li>Novonix Group cyclers</li> <li>MACCOR cyclers</li> <li>BioLogic cyclers</li> <li>Battery Archive data</li> </ul> <p>With partial and forthcoming support for:</p> <ul> <li>Indigo cyclers</li> <li>Neware cyclers</li> </ul> <p>BEEP provides a standardized interface for working with cycler data ranging in scale from a single file on a local laptop to running thousands of cycler files with massive throughput on large computing systems.</p> <p>We are currently looking for experienced python developers to help us improve this package and implement new features. Please contact any of the maintainers for more information.</p>"},{"location":"#installation","title":"Installation","text":"<p>To a base install, do:</p> <pre><code>pip install beep\n</code></pre> <p>If you want to develop BEEP and run tests, clone the repo via git and use  pip (or <code>python setup.py develop</code>)  for an editable install:</p> <pre><code>git clone git@github.com:ToyotaResearchInstitute/BEEP.git\ncd BEEP\npip install -e .[tests]\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<p>Make sure you have installed the required testing packages (see installation).</p> <pre><code>pytest beep\n</code></pre>"},{"location":"#how-to-cite","title":"How to cite","text":"<p>If you use BEEP, please cite this article:</p> <p>P. Herring, C. Balaji Gopal, M. Aykol, J.H. Montoya, A. Anapolsky, P.M. Attia, W. Gent, J.S. Hummelsh\u00f8j, L. Hung, H.-K. Kwon, P. Moore, D. Schweigert, K.A. Severson, S. Suram, Z. Yang, R.D. Braatz, B.D. Storey, SoftwareX 11 (2020) 100506. https://doi.org/10.1016/j.softx.2020.100506</p>"},{"location":"contributing/","title":"Contribution guidelines","text":"<p>Here are some simple contribution guidelines which you may find useful if you are considering adding features, bug fixes, or other updates to <code>beep</code>.</p> <p>Working within these guidelines will help your pull request be added in a timely fashion!</p> <p>Note this guide is meant primarily for battery scientists with limited experience in software development, particularly in python. </p> <p>In general, our goal here is to implement ideas which can be complex, convoluted, or confusing in the simplest, most concise, and most reusable manner possible.</p>"},{"location":"contributing/#before-you-begin","title":"Before you begin","text":"<ol> <li>Create an issue where new proposals can be discussed before any coding is done.</li> <li>Create a personal fork of the master repo.</li> <li>Download the source code onto your local system, by cloning the repository (or your fork of the repository).</li> <li>Create a branch of this repo on your own fork where all changes will be made</li> <li>Install BEEP with the developer options.</li> <li>Test if your installation worked. <code>pytest beep</code>.</li> </ol>"},{"location":"contributing/#code-standards","title":"Code standards","text":""},{"location":"contributing/#general","title":"General","text":"<ul> <li>Don't write boilerplate code: If repeated or similar lines of code can be encapsulated in a function, define a function and reuse the function.</li> <li>Good code should be easily readable on a line by line basis: Generally, we try to keep the total number of lines of code to a minimum. However, each line of code should be readable and as short as possible. If you are stuck choosing between fewer (yet more complex) lines of code and more (yet simpler), usually you should opt for more (yet simpler) code.</li> <li>Don't use highly complex one-liners: Although python allows for list and generator comprehensions in a single line, nesting these comprehensions or making them overly complex makes code very difficult to read. Often, it is easier to read an explicit <code>for</code> loop than to decompose a complex one-line comprehension or boolean condition.</li> </ul> <p>Example 1:</p> <pre><code># Bad - incomprehensible at a glance\nx = [t for t in {yi: yj for yi, yj in y_dict.items() if yi in yset}.values() if (t != 42 and t is not None)]\n# Better - can at least understand each line at a glance\ny = {}\nfor yi, yj in y_dict.items():\nif yi in yset:\ny[yi] = yj\nx = []\nfor t in y.values()\nif t != 42 and not t:\nx.append(t)\n</code></pre> <p>Example 2: <pre><code># Bad - impossible to read\nif (t != 42 and t is not None) or (array[0] != 42 and int(abs(max(array)))) not in forbidden_arrays):\ndo_something()\n# Better - can at least understand each line at a glance\nt_valid = t not in (42, None)\narray_valid = array[0] != 42\narray_forbidden = int(abs(max(array))) in forbidden_arrays\nif t_valid or (array_valid and not array_forbidden):\ndo_something()\n</code></pre></p> <ul> <li>Limit the number of arguments to functions/methods to ~10: Usually methods or functions with more than 10 arguments are hard to read.</li> <li>Use informative variable names: Use properly formatted, minimal, and informative names for variables, functions, and module names. </li> </ul> <p>Example:</p> <pre><code># Bad - a few examples of uninformative or ambiguous variable names\noutput_value = V/R\nOutputValue = V/R\nCurrentValue = V/R\n# Better - minimal and informative variable names\ncurrent = V/R\ncurrent_amps = voltage_volts/resistance_ohms\n</code></pre> <ul> <li>Use builtin libraries whenever possible: The python standard library has many useful libraries. Usually, working with the standard library modules is a reasonably performant, well supported, and highly error tolerant solution. Using external libraries or writing your own alternatives to the standard library's functions are encouraged only when there are significant performance, usability, or code clarity advantages</li> <li>Use informative exceptions: It is much easier to debug code with thoughtfully constructed exceptions (errors) than to reverse-engineer. For example, when an input is outside the expected range, use a <code>raise ValueError(\"Explanation goes here\")</code>. </li> <li>Discuss code changes on Github: Whether you are using a new external dependency or are unsure of how your code should be incorporated into beep, make an issue to discuss with the developers on github!</li> </ul>"},{"location":"contributing/#formatting","title":"Formatting","text":"<ul> <li>Adhering to any formatting standard (numpy-style, Google style, etc.) ensures your code can be read more easily.</li> <li>We encourage using the Google python standard style guide</li> <li>The PEP8 style guidelines can also be quite helpful for cleaning up your code.</li> <li>Programmatic tools: We encourage you to check your code with <code>flake8</code> and <code>pycodestyle</code>; these are the tools we use for automatically linting new pull requests.</li> </ul>"},{"location":"contributing/#documenting-your-code","title":"Documenting your code","text":"<p>Well-documented code ensures others can use and improve upon your code. </p>"},{"location":"contributing/#inline-comments","title":"Inline comments","text":"<p>In general, your code should explain itself; it should not need clarification from additional comments. However, it is occasionally necessary to add inline comments for explaining or citing particular methods, especially if those methods are esoteric or not explained elsewhere. Here is an example of a good block comment:</p> <pre><code># Regression according to Mathiesen's method; constants taken from \n# this publication: https://doi.org/10.101/12345\nmy_variable2 = (input1 * input2**2)/some_constant\nfinal_answer = constant3 * my_variable2\n</code></pre>"},{"location":"contributing/#docstrings-and-module-comments","title":"Docstrings and module comments","text":"<p>It is imperative that each function, method, class, and module you write are comprehensively documented. See Section 3.8 of the Google Python style guide for some examples of how to do this. </p>"},{"location":"contributing/#writing-unittests","title":"Writing unittests","text":"<p>Unittests are a way to check that your code works as intended. Code with new functionality must have tests! Testing your code means writing \"test\" methods which call a desired function/method with some known ground truth inputs and output. If the real output of your function/method matches the expected ground truth output, the test passes. </p> <p>In general, you should write unittests for each new functionality your code performs. Writing unittests at the same time you add a new piece of code (function, method, class) is the easiest way to do this.</p> <p>The fundamental unit of unittesting is a <code>TestCase</code> class. A <code>TestCase</code> class holds a set of related tests. <code>TestCase</code>s go in modules specific for testing - for example, <code>beep.structure.test.test_validate</code> is a testing module. </p> <p>For more information on the syntax for checking the correctness of statements (e.g., <code>self.assertTrue</code>), see the official python unittesting documentation.</p>"},{"location":"contributing/#step-1-find-the-correct-module-for-adding-your-tests","title":"Step 1: Find the correct module for adding your tests","text":"<p>If your code is in an existing module (e.g., <code>beep.features.intracell_analysis</code>), your tests will go in that module's test module (e.g., <code>beep.features.tests.test_intracell_analysis</code>)</p> <p>If your code is in a new module (e.g., <code>beep.structure.my_new_module</code>), your tests will go either:</p> <ul> <li>in a new module in that test directory (<code>beep.structure.tests.test_my_new_module</code>)</li> <li>in an existing module which implements tests for code similar to yours (e.g., if you are adding a new cycler datapath, <code>beep.structure.test_cyclerpaths</code>)</li> </ul> <p>If you are not sure where your test code should go, ask a developer in your pull request!</p>"},{"location":"contributing/#step-2-create-one-or-more-testcases","title":"Step 2: Create one or more <code>TestCase</code>s","text":"<p>A unittest <code>TestCase</code> is a set of methods which will run to test your new code. </p> <ul> <li>If your contribution is a small bug fix, you will add testing code inside an existing <code>TestCase</code> class.</li> <li>If your contribution adds new methods to an existing class or new functions to an existing module, your tests will go inside an existing <code>TestCase</code> class.</li> <li>If you are adding a new class, your tests should go in a new <code>TestCase</code> class.</li> <li>If you are adding multiple new classes or a new module, your tests shoudl go in multiple <code>TestCase</code> classes. For example, if you are adding <code>Class1</code> and <code>Class2</code> as new classes, you should probably have <code>TestClass1</code> and <code>TestClass2</code> as <code>TestCases</code>.</li> </ul>"},{"location":"contributing/#step-3-create-one-test-method-for-each-method-or-function-in-your-testcases","title":"Step 3: Create one test method for each method or function in your <code>TestCase</code>s","text":"<p>Inside your <code>TestCase</code> class, implement some basic - yet realistic - test cases to ensure your code is working as intended. This is where you will use python's unittesting library's <code>self.assert*</code> methods to check the outputs of code for correctness.</p> <p>If you are adding a class, there should be one testing method for each method of your new class.</p> <p>If you are adding one or more functions, there should be one testing method for each function added.</p> <p>Make sure your test cases work for:</p> <ul> <li>Minimal basic inputs with known outputs; ensure these tests are simple yet realistic.</li> <li>Edge cases which likely will be encountered (e.g., a numerical input is maximized, a numerical input is minimized, etc.)</li> <li>Erroneous input throws the expected exceptions using <code>self.assertRaises</code></li> </ul>"},{"location":"contributing/#unittesting-template","title":"Unittesting template","text":"<p>Here is a template/example of how to write unittests for a new class. The easiest way to get started is to copy+paste this code and replace the code with our own tests.</p> <pre><code>import unittest\nfrom beep.my_new_module import MyNewClass\nclass TestMyNewClass(unittest.TestCase)\ndef test_my_new_class(self):\n# testing the __init__ behavior of your class, for example\ninputs = [\"A\", 1, 15.2]\nmnc = MyNewClass(*inputs)\nself.assertTrue(mnc.some_attr)\nself.assertFalse(mnc.some_attr2)\ndef test_compute(self):\n# testing a particular method \"compute\" of your \"MyNewClass\" \n# class against a bunch of inputs\nmnc = MyNewClass(\"B\", 2, 21.3)\narg1 = SomeObject()\nx = range(1, 5)\nfor i in x:\nself.assertEqual(mnc.compute(arg1, i), 10)\nself.assertAlmostEqual(mnc.compute(arg1, i, as_float=True), 9.999999)\n# Make sure compute fails in the way we expect\nwith self.assertRaises(TypeError):\nmnc.compute(arg1, \"bad_input\")\n</code></pre>"},{"location":"contributing/#step-4-run-your-tests","title":"Step 4: Run your tests!","text":"<p>While all tests are checked by the Github continuous integration, you should run your tests locally. </p> <p>First, run your tests by themselves. Make sure you have the requirements from <code>requirements-test.txt</code> installed. You can then run your new test cases by  adding the following code at the bottom of the test file and running it.</p> <pre><code>if __name__ == \"__main__\":\n# replace TestMyNewClass with your TestCase name!\nunittest.main(TestMyNewClass())\n</code></pre> <p>If your test passed, congrats!</p> <p>You might also want to make sure your new code did not break any other tests. You can do this from the command line  in the base <code>beep</code> directory (the same directory as <code>setup.py</code>):</p> <pre><code>$: pytest beep --color=yes\n</code></pre>"},{"location":"contributing/#some-tips-for-writing-tests","title":"Some tips for writing tests","text":"<p>Find more info for each of these tips on the python unittesting docs.</p> <ul> <li>You can define a special <code>setUp</code> method for performing the same setup actions (e.g., clearing or resetting class attributes, creating a common input file) for all of your test methods. This can cut down on your boilerplate code.</li> <li>You can define a special <code>setUpClass</code> class method which will run once before any of the test methods run. </li> <li>You can define a special <code>tearDown</code> method for performing the same post-test actions after each test. This is useful for cleaning up leftover files. This is similar to <code>setUp</code>.</li> <li>You can define a special <code>tearDownClass</code> class method which will run once at the end of the <code>TestCase</code>. </li> </ul>"},{"location":"data/","title":"Cycler data requirements","text":"<p>BEEP automatically parses and structures data based on specific outputs from various  battery cyclers. The following column headers marked \"required\" are required for downstream processing of each  cycler. BEEP currently supports five brands of battery cyclers:</p> <ul> <li>Novonix</li> <li>Arbin</li> <li>Maccor</li> <li>Indigo</li> <li>BioLogic</li> <li>Neware</li> </ul>"},{"location":"data/#novonix","title":"Novonix","text":"<p>Novonix data files are of the form <code>name_of_file_CHXX.csv</code> containing both tabular cycler data and metadata/protocol steps. </p> <p>There may also be a tabular cycler-produced summary file <code>.csv</code> which can also be ingested and processed with beep.</p>"},{"location":"data/#cycler-data","title":"Cycler Data","text":"Column name (case insensitive) Required Explanation Unit Data Type <code>Date and Time</code> \u2713 date time string in <code>'%Y-%m-%d %I:%M:%S %p'</code> format <code>str</code> <code>Cycle Number</code> \u2713 index of the cycle <code>int32</code> <code>Step Type</code> \u2713 integer correspondent to the charge/discharge type of this step <code>int32</code> <code>Run Time (h)</code> \u2713 total time of the cycler run hours <code>float64</code> <code>Step Time (h)</code> \u2713 current run time since the beginning of the current step hours <code>float64</code> <code>Current (A)</code> \u2713 measured value of the present channel current Amp <code>float64</code> <code>Potential (V)</code> \u2713 measured value of the present channel voltage Volt <code>float64</code> <code>Capacity (Ah)</code> \u2713 value of the channel capacity Amp-hr <code>float64</code> <code>Temperature (\u00b0C)</code> temperature of channel \u00b0Celsius <code>float64</code> <code>Circuit Temperature (\u00b0C)</code> temperature of circuit \u00b0Celsius <code>float64</code> <code>Energy (Wh)</code> \u2713 computed present energy of cell Watt-hr <code>float64</code> <code>dVdt (I/h)</code> first order change rate of voltage <code>float64</code> <code>dIdt (V/h)</code> first order change rate of current <code>float64</code> <code>Step Number</code> \u2713 step number within cycle <code>int32</code> <code>Step position</code> <code>int32</code>"},{"location":"data/#metadata","title":"Metadata","text":"<p>Metadata for Novonix files is contained within the raw data itself.</p> Field name Required <code>Channel</code> <code>Cell</code> <code>Serial Number</code> <code>Description</code> <code>Protocol</code> <code>Mass (g)</code> <code>Capacity (Ah)</code> <code>Area (cm2)</code> <code>DC Offset Voltage (V)</code> <code>Started</code> <code>Version</code>"},{"location":"data/#summary-file","title":"Summary file","text":"<p>The summary file is a csv with one row corresponding to the summary of one cycle. No particular column names are required for ingestion. </p>"},{"location":"data/#arbin","title":"Arbin","text":"<p>Arbin data files are of the form <code>name_of_file_CHXX.csv</code> with an associated metadata file <code>name_of_file_CHXX_Metadata.csv</code></p>"},{"location":"data/#cycler-data_1","title":"Cycler Data","text":"Column name (case insensitive) Required Explanation Unit Data Type <code>data_point</code> index of this data point <code>int32</code> <code>test_time</code> time of data point relative to start seconds <code>float32</code> <code>datetime</code> \u2713 time of data point relative to epoch time seconds <code>float32</code> <code>step_time</code> elapsed time counted from the starting point of present active step seconds <code>float32</code> <code>step_index</code> \u2713 currently running step number in the active schedule <code>int16</code> <code>cycle_index</code> \u2713 currently active test cycle number <code>int32</code> <code>current</code> \u2713 measured value of present channel current Amps <code>float32</code> <code>voltage</code> \u2713 measured value of present channel voltage Volts <code>float32</code> <code>charge_capacity</code> \u2713 cumulative value of present channel charge capacity Amp-hr <code>float64</code> <code>discharge_capacity</code> \u2713 cumulative value of present channel discharge capacity Amp-hr <code>float64</code> <code>charge_energy</code> \u2713 cumulative value of present channel charge energy Watt-hr <code>float64</code> <code>discharge_energy</code> \u2713 cumulative value of present channel discharge energy Watt-hr <code>float64</code> <code>dv/dt</code> the first-order change rate of voltage Volts/seconds <code>float32</code> <code>internal_resistance</code> calculated internal resistance Ohms <code>float32</code> <code>temperature</code> cell temperature \u00b0Celsius <code>float32</code>"},{"location":"data/#metadata_1","title":"Metadata","text":"Field name Required <code>test_id</code> <code>device_id</code> <code>iv_ch_id</code> <code>first_start_datetime</code> <code>schedule_file_name</code> <code>item_id</code> <code>resumed_times</code> <code>last_end_datetime</code> <code>databases</code> <code>grade_id</code> <code>has_aux</code> <code>has_special</code> <code>schedule_version</code> <code>log_aux_data_flag</code> <code>log_special_data_flag</code> <code>rowstate</code> <code>canconfig_filename</code> <code>m_ncanconfigmd5</code> <code>value</code> <code>value2</code>"},{"location":"data/#maccor","title":"Maccor","text":"<p>Maccor files are single tabular text files matching the regex pattern <code>\".*\\\\d{5,6}.*\\\\d{3}\"</code>.</p> Column name (case insensitive) Required Explanation Unit Data Type <code>rec#</code> \u2713 data point number (index) <code>int32</code> <code>cyc#</code> \u2713 cycle number <code>int32</code> <code>step</code> \u2713 step number <code>int16</code> <code>test (sec)</code> \u2713 total time elapsed seconds <code>float32</code> <code>step (sec)</code> \u2713 time within this step seconds <code>float32</code> <code>amp-hr</code> \u2713 charge capacity Amp-hr <code>float64</code> <code>watt-hr</code> \u2713 charge energy Watt-hr <code>float64</code> <code>amps</code> \u2713 channel current Amps <code>float32</code> <code>volts</code> \u2713 channel voltage Volts <code>float32</code> <code>state</code> \u2713 charging/discharging/etc. state of the battery <code>category</code> <code>es</code> \u2713 <code>category</code> <code>dpt time</code> \u2713 date and time of data point Date-Time <code>str</code> <code>acimp/ohms</code> \u2713 AC impedance of circuit Ohm <code>float32</code> <code>dcir/ohms</code> \u2713 DC internal resistance Ohm <code>float32</code> <code>wf chg cap</code> \u2713 charge capacity (based on waveform, if available) Amp-hh <code>float32</code> <code>wf dis cap</code> \u2713 discharge capacity (based on waveform, if available) Amp-hr <code>float32</code> <code>wf chg e</code> \u2713 charge energy (based on waveform, if available) Watt-hr <code>float32</code> <code>wf dis e</code> \u2713 discharge energy (based on waveform, if available) Watt-hr <code>float32</code> <code>range</code> \u2713 <code>uint8</code> <code>var1</code> \u2713 <code>float16</code> <code>var2</code> \u2713 <code>float16</code> <code>var3</code> \u2713 <code>float16</code> <code>var4</code> \u2713 <code>float16</code> <code>var5</code> \u2713 <code>float16</code> <code>var6</code> \u2713 <code>float16</code> <code>var7</code> \u2713 <code>float16</code> <code>var8</code> \u2713 <code>float16</code> <code>var9</code> \u2713 <code>float16</code> <code>var10</code> \u2713 <code>float16</code> <code>var11</code> \u2713 <code>float16</code> <code>var12</code> \u2713 <code>float16</code> <code>var13</code> \u2713 <code>float16</code> <code>var14</code> \u2713 <code>float16</code> <code>var15</code> \u2713 <code>float16</code>"},{"location":"data/#indigo","title":"Indigo","text":"<p>Indigo files are single hierarchical data files (<code>*.h5</code>) with the mandatory group store field <code>\"time_series_data\"</code>. </p> Column name (case insensitive) Required Explanation Unit Data Type <code>cell_coulomb_count_c</code> \u2713 instantaneous cell charge Coulombs <code>cell_current_a</code> \u2713 A <code>cell_energy_j</code> \u2713 cell energy Joules <code>cell_id</code> \u2713 identifier of the cell <code>cell_power_w</code> instantaneous cell power Watts <code>cell_temperature_c</code> temperature of the cell \u00b0Celsius <code>cell_voltage_v</code> \u2713 voltage of the cell Volts <code>cycle_count</code> \u2713 index of the cycle <code>experiment_count</code> index of the experiment <code>experiment_type</code> <code>half_cycle_count</code> \u2713 <code>system_time_us</code> \u2713 test time of data point relative to epoch microseconds <code>time_s</code> time elapsed since test beginning seconds"},{"location":"data/#biologic","title":"BioLogic","text":"<p>BioLogic files are ASCII text files of the form <code>*.mpt</code> with matching <code>*.mpl</code> log/metadata files.</p> <p>BioLogic cycler data is currently only supported for structuring operations (e.g., ingestion via <code>BioLogicDatapath</code> analysis) and is not supported for downstream processing.</p> Column name Required Explanation Unit Data Type <code>cycle number</code> \u2713 index of this cycle <code>int</code> <code>half cycle</code> \u2713 <code>int</code> <code>Ecell/V</code> \u2713 cell potential Volts <code>float</code> <code>I/mA</code> \u2713 cell current mAmps <code>float</code> <code>Q discharge/mA.h</code> \u2713 discharge capacity mAmp-hr <code>float</code> <code>Q charge/mA.h</code> \u2713 charge capacty mAmp-hr <code>float</code> <code>Energy charge/W.h</code> \u2713 charge energy Watt-hr <code>float</code> <code>Energy discharge/W.h</code> \u2713 discharge energy Watt-hr <code>float</code> <p>Various other fields in BioLogic data or metadata files are not required.</p>"},{"location":"data/#neware","title":"Neware","text":"<p>Neware files are singular <code>*.csv</code> files.</p> <p>Note: Neware files use non-standard csv formatting; some fields may require further processing or structuring before input to <code>beep</code>.</p> Column name Required Explanation Unit Data Type <code>Record ID</code> \u2713 index of this data point <code>int32</code> <code>Realtime</code> \u2713 date-time format for this point <code>Time(h:min:s.ms)</code> \u2713 recorded time for this point seconds <code>float32</code> <code>Step ID</code> \u2713 index of this step <code>int16</code> <code>Cycle ID</code> \u2713 index of this cycle <code>int32</code> <code>Current(mA)</code> \u2713 cell current mAmps <code>float32</code> <code>Voltage(V)</code> \u2713 cell voltage Volts <code>float32</code> <code>Capacitance_Chg(mAh)</code> \u2713 charge capacity mAmp-hr <code>float64</code> <code>Capacitance_DChg(mAh)</code> \u2713 discharge capacity mAmp-hr <code>float64</code> <code>Engy_Chg(mWh)</code> \u2713 charge energy mWatt-hr <code>float64</code> <code>Engy_DChg(mWh)</code> \u2713 discharge energy mWatt-hr <code>float64</code> <code>DCIR(O)</code> \u2713 DC internal resistance <code>float32</code> <code>Capacity(mAh)</code> \u2713 mAmp-hr <code>Capacity Density(mAh/g)</code> \u2713 mAmp-hr/gram <code>Energy(mWh)</code> \u2713 mWatt-hr <code>CmpEng(mWh/g)</code> \u2713 mWatt-hr/gram <code>Min-T(C)</code> \u2713 mimumum cell temperature \u00b0Celsius <code>Max-T(C)</code> \u2713 max cell temperature \u00b0Celsius <code>Avg-T(C)</code> \u2713 average cell temperature \u00b0Celsius <code>Power(mW)</code> \u2713 instantaneous power mWatt <code>dQ/dV(mAh/V)</code> \u2713 differential capacity mAmp-hr/Volt <code>dQm/dV(mAh/V.g)</code> \u2713 differential capacity density mAmp-hr/Volt-gram <code>Temperature(C)</code> \u2713 temperature (alternate sensor) \u00b0Celsius <code>float32</code>"},{"location":"data/#battery-archive","title":"Battery Archive","text":"<p>Battery Archive files are singular csvs matching the file pattern <code>*timeseries*.csv</code>.</p> Column name (case insensitive) Required Explanation Unit Data Type <code>Cycle_Index</code> \u2713 index of this cycle <code>int</code> <code>Current (A)</code> \u2713 cell current Amps <code>float</code> <code>Voltage (V)</code> \u2713 cell potential Volts <code>float</code> <code>Charge_Capacity (Ah)</code> \u2713 charge capacity amp-hr <code>float</code> <code>Discharge_Capacity (Ah)</code> \u2713 discharge capacity amp-hr <code>float</code> <code>Charge_Energy (Wh)</code> \u2713 charge energy watt-hr <code>float</code> <code>Discharge_Energy (Wh)</code> \u2713 discharge energy watt-hr <code>float</code> <code>Cell_Temperature (C)</code> \u2713 temperature of the cell \u00b0Celsius <code>float</code> <code>Environmental_Temperature (C)</code> environmental temperature \u00b0Celsius <code>float</code> <code>Test_Time (s)</code> \u2713 test time seconds <code>float</code> <code>Date_Time</code> \u2713 datetime string, in <code>'%Y-%m-%d %H:%M:%S.%f'</code> format <code>str</code> <p>No metadata ingestion is supported for Battery Archive files at this time.</p>"},{"location":"Command%20Line%20Interface/1%20-%20overview/","title":"Overview","text":"<p>The beep base command specifies options for creating metadata and logging for all subcommands.</p> <p>This page is a general overview of options that are common among any beep subcommand. You can expect  options on this page to pertain to basically any beep CLI operation's inputs, outputs, and file formats.</p>"},{"location":"Command%20Line%20Interface/1%20-%20overview/#basics","title":"Basics","text":"<p>The BEEP CLI can be used like:</p> <pre><code>$: beep &lt;options&gt; &lt;subcommand&gt;\n</code></pre> <p>Options for the base <code>beep</code> command are specified before the subcommand. All beep subcommands take at least one file as input and return one or more files as output.</p> <p>Beep has six subcommands:</p> <ul> <li><code>beep structure</code>: Parse, interpolate, clean, and standardize a wide range of battery cycler output files. </li> <li><code>beep featurize</code>: Generate features for learning from structured files.</li> <li><code>beep train</code>: Train a machine learning model based on features.</li> <li><code>beep predict</code>: Predict battery degradation based on learning features and a previously trained model. </li> <li><code>beep protocol</code>: Generate cycler protocol from pre-made templates for a wide range of cyclers.</li> <li><code>beep inspect</code>: Visually inspect and debug beep files on disk.</li> </ul> <p>For more info on any command or the base command, simply pass <code>--help</code> as an option.</p> <p>The help dialog for <code>beep</code> base command looks like:</p> <pre><code>$: beep --help\n\nUsage: beep [OPTIONS] COMMAND [ARGS]...\n\nBase BEEP command.\n\nOptions:\n  -l, --log-file FILE            File to log formatted json to. Log will still\n                                 be output in human readable form to stdout,\n                                 but if --log-file is specified, it will be\n                                 additionally logged to a jsonl (json-lines)\nformatted file.\n  -r, --run-id INTEGER           An integer run_id which can be optionally\n                                 assigned to this run. It will be output in\nthe metadata status json for any subcommand\n                                 if the status json is enabled.\n  -t, --tags TEXT                Add optional tags to the status json\n                                 metadata. Can be later used forlarge-scale\n                                 queries on database data about sets of BEEP\n                                 runs. Example:'experiments_for_kristin'.\n  -s, --output-status-json FILE  File to output with JSON info about the\n                                 states of files which have had any beep\n                                 subcommand operationrun on them (e.g.,\n                                 structuring). Contains comprehensiveinfo\n                                 about the success of the operation for all\n                                 files.1 status json = 1 operation.\n  --halt-on-error                Set to halt BEEP if critical featurization\n                                 errors are encountered on any file with any\n                                 featurizer. Otherwise, logs critical errors\n                                 to the status json.\n  --help                         Show this message and exit.\n\nCommands:\n  featurize  Featurize one or more files.\n  predict    Run a previously trained model to predict degradation...\n  protocol   Generate protocol for battery cyclers from a csv file input.\n  structure  Structure and/or validate one or more files.\n  train      Train a machine learning model using all available data and...\n</code></pre>"},{"location":"Command%20Line%20Interface/1%20-%20overview/#output-streams","title":"Output streams","text":"<p>The beep base command options are used for specifying if and where to output the metadata and status of any CLI operation.</p> <p>Human-readable output will always be logged to stdout, for example:</p> <pre><code>2021-09-21 16:14:43 INFO     Structuring 1 files\n2021-09-21 16:14:43 DEBUG    Hashing file '/beep/beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29.csv' to MD5\n2021-09-21 16:14:43 INFO     File 1 of 1: Reading raw file /beep/beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29.csv from disk...\n2021-09-21 16:14:44 INFO     File 1 of 1: Validating: /beep/beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29.csv according to schema file '/beep/beep/validation_schemas/schema-arbin-lfp.yaml'\n2021-09-21 16:14:44 INFO     File 1 of 1: Validated: /beep/beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29.csv\n2021-09-21 16:14:44 INFO     File 1 of 1: Structuring: Read from /beep/beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29.csv\n2021-09-21 16:14:44 INFO     Beginning structuring along charge axis 'charge_capacity' and discharge axis 'voltage'.\n2021-09-21 16:15:21 INFO     File 1 of 1: Structured: Written to /beep/beep/CLI_TEST_FILES_FEATURIZATION/tmp.json.gz\n2021-09-21 16:15:21 INFO     Structuring report:\n2021-09-21 16:15:21 INFO        Succeeded: 1/1\n2021-09-21 16:15:21 INFO        Invalid: 0/1\n2021-09-21 16:15:21 INFO        Failed: 0/1\n</code></pre> <p>But other output streams are also available:</p>"},{"location":"Command%20Line%20Interface/1%20-%20overview/#-log-file","title":"<code>--log-file</code>","text":"<p>Machine-readable json log file to write. If not specified, no log file will be created. Example:</p> <pre><code>{\"time\": \"2021-09-21 16:13:48,938\", \"level\": \"INFO\", \"process\": \"67214\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \"Structuring 1 files\"}\n{\"time\": \"2021-09-21 16:13:48,939\", \"level\": \"DEBUG\", \"process\": \"67214\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \"Hashing file '/beep/beep/CLI_TEST_FILES_FEATURIZATION/PreDiag_000440_0000FB_structure.json' to MD5\"}\n{\"time\": \"2021-09-21 16:13:49,228\", \"level\": \"INFO\", \"process\": \"67214\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \"File 1 of 1: Reading raw file /beep/beep/CLI_TEST_FILES_FEATURIZATION/PreDiag_000440_0000FB_structure.json from disk...\"}\n{\"time\": \"2021-09-21 16:13:50,390\", \"level\": \"ERROR\", \"process\": \"67214\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \"File 1 of 1: Failed/invalid: (EmptyDataError): /beep/beep/CLI_TEST_FILES_FEATURIZATION/PreDiag_000440_0000FB_structure.json\"}\n{\"time\": \"2021-09-21 16:13:50,391\", \"level\": \"INFO\", \"process\": \"67214\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \"Structuring report:\"}\n{\"time\": \"2021-09-21 16:13:50,391\", \"level\": \"INFO\", \"process\": \"67214\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \" Succeeded: 0/1\"}\n{\"time\": \"2021-09-21 16:13:50,391\", \"level\": \"INFO\", \"process\": \"67214\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \" Invalid: 1/1\"}\n{\"time\": \"2021-09-21 16:13:50,391\", \"level\": \"INFO\", \"process\": \"67214\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \"         - /beep/beep/CLI_TEST_FILES_FEATURIZATION/PreDiag_000440_0000FB_structure.json\"}\n{\"time\": \"2021-09-21 16:13:50,391\", \"level\": \"INFO\", \"process\": \"67214\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \" Failed: 0/1\"}\n{\"time\": \"2021-09-21 16:14:43,291\", \"level\": \"INFO\", \"process\": \"67264\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \"Structuring 1 files\"}\n{\"time\": \"2021-09-21 16:14:43,291\", \"level\": \"DEBUG\", \"process\": \"67264\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \"Hashing file '/beep/beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29.csv' to MD5\"}\n{\"time\": \"2021-09-21 16:14:43,385\", \"level\": \"INFO\", \"process\": \"67264\", \"module\": \"cmd\", \"func\": \"structure\", \"msg\": \"File 1 of 1: Reading raw file /beep/beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29.csv from disk..\n</code></pre>"},{"location":"Command%20Line%20Interface/1%20-%20overview/#-output-status-json","title":"<code>--output-status-json</code>","text":"<p>JSON file to write containing comprehensive structured metadata about any operation and all of its sub-operations. If not specified, no status json will be written. Example:</p> <pre><code>{\n  \"op_type\": \"featurize\",\n  \"feature_matrix\": {\n    \"created\": true,\n    \"traceback\": null,\n    \"output\": \"/beep/beep/CLI_TEST_FILES_FEATURIZATION/features.json.gz\"\n  },\n  \"files\": {\n    \"/beep/beep/CLI_TEST_FILES_FEATURIZATION/PreDiag_000440_0000FB_structure.json\": {\n      \"walltime\": 8.546396970748901,\n      \"output\": null,\n      \"processed_md5_chksum\": \"5848d8598584e45addfa8129bb078d95\",\n      \"featurizers\": {\n        \"HPPCResistanceVoltageFeatures\": {\n          \"output\": null,\n          \"valid\": true,\n          \"featurized\": true,\n          \"walltime\": 1.2403650283813477,\n          \"traceback\": null,\n          \"subop_md5_chksum\": null\n        },\n        \"DeltaQFastCharge\": {\n          \"output\": null,\n          \"valid\": true,\n          \"featurized\": true,\n          \"walltime\": 0.05008506774902344,\n          \"traceback\": null,\n          \"subop_md5_chksum\": null\n        },\n        \"DiagnosticSummaryStats\": {\n          \"output\": null,\n          \"valid\": true,\n          \"featurized\": true,\n          \"walltime\": 0.19507122039794922,\n          \"traceback\": null,\n          \"subop_md5_chksum\": null\n        },\n        \"CycleSummaryStats\": {\n          \"output\": null,\n          \"valid\": true,\n          \"featurized\": true,\n          \"walltime\": 0.013413190841674805,\n          \"traceback\": null,\n          \"subop_md5_chksum\": null\n        }\n      }\n    },\n...\n  \"metadata\": {\n    \"beep_verison\": \"2021.8.2.15\",\n    \"op_datetime_utc\": \"2021-09-04 00:40:12\",\n    \"run_id\": null,\n    \"tags\": []\n  }\n}\n</code></pre> <p>Any one beep command (e.g., <code>beep structure *</code>), regardless of how many files it intakes or generates, will always produce exactly one status json if <code>--output-status-json</code> is defined.</p>"},{"location":"Command%20Line%20Interface/1%20-%20overview/#fault-tolerance","title":"Fault-tolerance","text":""},{"location":"Command%20Line%20Interface/1%20-%20overview/#-halt-on-error","title":"<code>--halt-on-error</code>","text":"<p>By default, BEEP runs all operations in a fault-tolerant manner. This means that if the CLI command syntax is valid, but internally an operation or sub-operation fails, the process will return successful. </p> <p>To disable this behavior, which will cause any error in any operation or sub-operation to fail the entire command use the <code>--halt-on-error</code> flag.</p>"},{"location":"Command%20Line%20Interface/1%20-%20overview/#extra-metadata-and-run-tracking-with-status-json","title":"Extra metadata and run-tracking with status json","text":"<p>Running many experiments can make it difficult to keep track of which input and output files correspond to which experiment. Data about input files and output files is kept in  the status json, but for further tracking there are two arguments which can be specified:</p>"},{"location":"Command%20Line%20Interface/1%20-%20overview/#-run-id","title":"<code>--run-id</code>","text":"<p>An integer run_id to associate with this operation. The <code>run-id</code> is recorded in the <code>metadata</code> field of any operation in its status json.</p>"},{"location":"Command%20Line%20Interface/1%20-%20overview/#-tags","title":"<code>--tags</code>","text":"<p>A list of string tags to associate with this operation. The <code>tags</code> are recorded in the <code>metadata</code> field of any operation in its status json.</p> <p>An example of a status json containing a user run id and user tags:</p> <pre><code># in status json output\n...\n  \"metadata\": {\n    \"beep_verison\": \"2021.8.2.15\",\n    \"op_datetime_utc\": \"2021-09-04 00:40:12\",\n    \"run_id\": 234,\n    \"tags\": [\"my_tag_1\", \"TRI_experiments_2021\", \"debugging\"]\n  }\n</code></pre>"},{"location":"Command%20Line%20Interface/1%20-%20overview/#controlling-compression-and-output-file-formats","title":"Controlling compression and output file formats","text":"<p>Serialization in <code>beep</code> is done by the <code>monty</code> library; to use compression on any output files, status files, or intermediate files in any beep subcommand, append <code>.gz</code> to the end of the output filename(s).</p> <p>For example:</p> <pre><code># For example, write our status json to a regular (uncompressed) json file\n# And write our feature matrix output artifact to a gzipped json file\n$: beep -s status.json featurize * outputFeatureMatrix.json.gz\n</code></pre> <p>Although they are not officially supported, other compression methods (such as <code>.bz2</code>) and file formats (<code>.yaml</code>) may be serialized to/from <code>beep</code> if they are supported by the current version of <code>monty</code>. </p>"},{"location":"Command%20Line%20Interface/2%20-%20structuring/","title":"Structure","text":"<p>The <code>beep structure</code> command takes in N raw battery cycler files (mostly text or csv) and produces N standardized, structured data json files. </p> <p></p> <p>The structured json files can be loaded either with the BEEP python <code>BEEPDatapath</code> interface (see Advanced Structuring) or with subsequent CLI commands such as <code>beep featurize</code> (see CLI - Featurize).</p>"},{"location":"Command%20Line%20Interface/2%20-%20structuring/#structuring-help-dialog","title":"Structuring help dialog","text":"<pre><code>Usage: beep structure [OPTIONS] [FILES]...\n\n  Structure and/or validate one or more files. Argument is a space-separated\n  list of files or globs.\n\nOptions:\n  -o, --output-filenames PATH     Filenames to write each input filename to.\n                                  If not specified, auto-names each file by\n                                  appending`-structured` before the file\n                                  extension inside the current working dir.\n  -d, --output-dir DIRECTORY      Directory to dump auto-named files to. Only\n                                  works if--output-filenames is not specified.\n  -p, --protocol-parameters-dir DIRECTORY\n                                  Directory of a protocol parameters files to\n                                  use for auto-structuring. If not specified,\n                                  BEEP cannot auto-structure. Use with\n                                  --automatic.\n  -v, --v-range &lt;FLOAT FLOAT&gt;...  Lower, upper bounds for voltage range for\n                                  structuring. Overridden by auto-structuring\n                                  if --automatic.\n  -r, --resolution INTEGER        Resolution for interpolation for\n                                  structuring. Overridden by auto-structuring\n                                  if --automatic.\n  -n, --nominal-capacity FLOAT    Nominal capacity to use for structuring.\n                                  Overridden by auto-structuring if\n                                  --automatic.\n  -f, --full-fast-charge FLOAT    Full fast charge threshold to use for\n                                  structuring. Overridden by auto-structuring\n                                  if --automatic.\n  -c, --charge-axis TEXT          Axis to use for charge step interpolation.\n                                  Must be found inside the loaded dataframe.\n                                  Can be used with --automatic.\n  -x, --discharge-axis TEXT       Axis to use for discharge step\n                                  interpolation. Must be found inside the\n                                  loaded dataframe. Can be used with--\n                                  automatic.\n  -b, --s3-bucket TEXT            Expands file paths to include those in the\n                                  s3 bucket specified. File paths specify s3\n                                  keys. Keys can be globbed/wildcarded. Paths\n                                  matching local files will be prioritized\n                                  over files with identical paths/globs in s3.\n                                  Files will be downloaded to CWD.\n  --automatic                     If --protocol-parameters-path is specified,\n                                  will automatically determine structuring\n                                  parameters. Will override all manually set\n                                  structuring parameters.\n  --validation-only               Skips structuring, only validates files.\n  --no-raw                        Does not save raw cycler data to disk. Saves\n                                  disk space, but prevents files from being\n                                  partially restructued.\n  --s3-use-cache                  Use s3 cache defined with environment\n                                  variable BEEP_S3_CACHE instead of\n                                  downloading files directly to the CWD.\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"Command%20Line%20Interface/2%20-%20structuring/#specifying-output-locations","title":"Specifying output locations","text":"<p>There are three options for specifying output filenames:</p> <ul> <li>Specify all output filenames, one for each input file. Should be <code>json</code>. Use <code>--output-filenames</code> (<code>-o</code>) to specify files, for example:</li> </ul> <pre><code>$: beep structure -o output1.json -o /path/to/output2.json input1.csv input2.csv\n\n# Outputs output1.json in the CWD and output2.json at /path/to/output.json. \n</code></pre> <ul> <li>Specify an output directory where auto-named files will be output. Directory should exist.  Use <code>--output-dir</code> to specify.</li> </ul> <pre><code>$: beep structure -d /path/to/output_dir input1.csv input2.csv\n\n# Outputs \n# - /path/to/output_dir/input1-structured.json\n# - /path/to/output_dir/input2-structured.json\n</code></pre> <ul> <li>Automatically named files output in CWD. No options needed.</li> </ul> <pre><code>$: beep structure input1.csv input2.csv\n\n# Outputs in the CWD:\n# - ./input1-structured.json\n# - ./input2-structured.json\n</code></pre>"},{"location":"Command%20Line%20Interface/2%20-%20structuring/#select-files-including-from-s3","title":"Select files (including from S3)","text":"<p>Input files can be named individually or globbed. Input files should be supported by BEEP; see Cycler Data Requirements for more details. </p> <p>Example 1:</p> <pre><code>$: beep structure file1.csv file2.070\n</code></pre> <p>Input files do not need to belong to the same cycler type to work together in one operation.</p> <p>Example 2:</p> <pre><code>$: beep structure /path/to/some_files/* /other/path/file.csv\n</code></pre> <p>If you pass the <code>--s3-bucket</code> argument, you can select files or globs based on keys in this bucket. Note you must have boto3 set up in order to use the S3 files with BEEP. </p> <p>Example for S3:</p> <pre><code>S: beep structure --s3-bucket XXXXXXXXXXXXX /my/s3/key.071 </code></pre>"},{"location":"Command%20Line%20Interface/2%20-%20structuring/#customize-structuring-parameters","title":"Customize structuring parameters","text":"<p>You can customize the structuring parameters using these individual variables:</p> <ul> <li><code>--v-range</code></li> <li><code>--resolution</code></li> <li><code>--nominal-capacity</code></li> <li><code>--full-fast-charge</code></li> <li><code>--charge-axis</code></li> <li><code>--discharge-axis</code></li> </ul> <p>Example:</p> <pre><code>$: beep structure * --v-range 0.5 0.9 --resolution 200 --nominal-capacity 1.1 --full-fast-charge 0.9\n</code></pre> <p>Alternatively, you can use automatic structuring by passing the <code>--automatic</code> flag. While this flag will by default use a general-purpose set of files for determining structuring parameters, you can specifcy your own parameters for  autostructuring by passing both <code>--automatic</code> and <code>--protocol-parameters-dir</code>. For example</p> <pre><code>$: beep structure * --protocol-parameters-dir /path/to/my/params --automatic\n</code></pre>"},{"location":"Command%20Line%20Interface/2%20-%20structuring/#failing-or-invalid-files","title":"Failing or invalid files","text":"<p>If any of your files fail or are invalid, you can inspect the full traceback in the status json if you have <code>--output-status-json</code>  specified in the base beep command.</p> <p>If this does not provide enough information, you can use the inspect command to examine your file, if it can be loaded.</p>"},{"location":"Command%20Line%20Interface/3%20-%20featurize/","title":"Featurize","text":"<p>Featurize (<code>beep featurize</code>) is a way to robustly apply many feature generation routines (featurizers) with different hyperparameters to large sets of files (e.g., a thousand structured cycler files).</p> <p>The input to <code>beep featurize</code> is N structured/processed json files from <code>beep structure</code>.</p> <p>The output of <code>beep featurize</code> is 1 feature matrix file (no matter how many featurizers are applied). Also, optionally N x M featurizer  intermediate files for M featurizers (one for each featurizer applied to each file.)</p> <p>Each row of the output feature matrix corresponds to a single cycler file:</p> <pre><code>target_matrix\n               capacity_0.83::TrajectoryFastCharge             ...          rpt_1Cdischarge_energy0.8_real_regular_throughput::DiagnosticProperties\nfilename                                                       ...                                                                                                                                           file1                         284                              ...                                                NaN                                                                                        file2                          58                              ...                                        1266.108637                                                                                        file3                          85                              ...                                                NaN                                                                                        file4                         101                              ...                                                NaN                                                                                        </code></pre> <p><code>beep featurize</code> is used for both generating learning features (e.g., voltage under some condition) and targets such as degradation metrics (e.g., cycles to reach a specific capacity).</p> <p></p>"},{"location":"Command%20Line%20Interface/3%20-%20featurize/#featurization-help-dialog","title":"Featurization help dialog","text":"<pre><code>$: beep featurize --help\n\nUsage: beep featurize [OPTIONS] [FILES]...\n\nFeaturize one or more files. Argument is a space-separated list of files or\n  globs. The same features are applied to each file. Naming of output files is\n  done automatically, but the output directory can be specified.\n\nOptions:\n  -o, --output-filename FILE      Filename to save entre feature matrix to. If\n                                  not specified, output filewill be named with\n                                  FeatureMatrix-[timestamp].json.gz. If\n                                  specified, overrides the output dir for\nsaving the feature matrix to file.\n  -d, --output-dir DIRECTORY      Directory to dump auto-named files to.\n  -f, --featurize-with TEXT       Specify a featurizer to apply by class name,\n                                  e.g. HPPCResistanceVoltageFeatures. To apply\n                                  more than one featurizer, use multiple -f\n                                  &lt;FEATURIZER&gt; commands. To apply sets ofcore\n                                  BEEP featurizers, pass either 'all_features'\nfor all features or'all_targets' for all\n                                  targets (features which can be used as\n                                  targets). Note if 'all_features' or\n                                  'all_targets' is passed, other -f\n                                  featurizers will be ignored. All feautrizers\n                                  are attempted to apply with default\n                                  hyperparameters; to specify your own\n                                  hyperparameters, use --featurize-with-\n                                  hyperparams.Classes from installed modules\n                                  not in core BEEP can be specified with the\n                                  class name in absolute import format, e.g.,\n                                  my_package.my_module.MyClass.\n  -h, --featurize-with-hyperparams TEXT\n                                  Specify a featurizer to apply by class name\n                                  with your own hyperparameters.(such as\n                                  parameter directories or specific values for\nhyperparametersfor this featurizer), pass a\n                                  dictionary in the format:\n                                  '{\"FEATURIZER_NAME\": {\"HYPERPARAM1\":\n                                  \"VALUE1\"...}}' including the single quotes\n                                  around the outside and double quotes for\ninternal strings.Custom hyperparameters will\n                                  be merged with default hyperparameters if\nthe hyperparameter dictionary is\n                                  underspecified.\n  --save-intermediates            Save the intermediate BEEPFeaturizers as\n                                  json files. Filenames are autogenerated and\n                                  saved in output-dir if specified; otherwise,\n                                  intermediates are written to current working\n                                  directory.\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"Command%20Line%20Interface/3%20-%20featurize/#specifying-input","title":"Specifying input","text":"<p>The inputs for <code>beep featurize</code> are structured json output files from <code>beep structure</code>; Alternatively, structured data serialized with <code>BEEPDatapath</code> in python will also work.</p> <p>Files can be globbed.</p>"},{"location":"Command%20Line%20Interface/3%20-%20featurize/#specifying-outputs","title":"Specifying outputs","text":"<p>The <code>beep featurize</code> command outputs a feature matrix as its required sole output. This file will be auto-named if <code>--output-filename</code> is not specified. </p> <p>To include saving of intermediate featurizer files, use the <code>--save-intermediates</code> flag. These files will be auto-named and put into the CWD if <code>--output-dir</code> is not set.</p> <p>Specifying <code>--output-dir</code> overrides <code>--output-filename</code> and will save all files (including intermediates) into this directory with automatic naming.</p>"},{"location":"Command%20Line%20Interface/3%20-%20featurize/#selecting-featurizers-to-apply","title":"Selecting featurizers to apply","text":""},{"location":"Command%20Line%20Interface/3%20-%20featurize/#featurizers-in-beep","title":"Featurizers in BEEP","text":"<p><code>beep featurize</code> works with \"core\" features in BEEP. </p> <p>To use one with default hyperparameters, use the <code>--featurize-with</code> or <code>-f</code> option with the class name of the featurizer you'd like to use.</p> <p>For example, to apply the <code>HPPCResistanceVoltageFeatures</code> and <code>CycleSummaryStats</code> featurizers, </p> <pre><code>$: beep featurize -f HPPCResistanceVoltageFeatures -f CycleSummaryStats my_structured_file.json\n</code></pre> <p>You can apply the full set of featurizers for generating learning features by passing <code>--featurize-with all_features</code>:</p> <pre><code>$: beep featurize -f all_features my_structured_file.json\n</code></pre> <p>Similarly, for features from which degradation targets can be derived, pass <code>--featurize-with all_targets</code></p> <pre><code>$: beep featurize -f all_targets my_structured_file.json\n</code></pre> <p>Note passing <code>all_features</code> or <code>all_targets</code> will override any other <code>--featurize-with</code> classes.</p>"},{"location":"Command%20Line%20Interface/3%20-%20featurize/#featurizers-with-custom-hyperparameters","title":"Featurizers with custom hyperparameters","text":"<p>To use custom hyperparameters in <code>beep featurize</code>, pass each featurizer + hyperparameter set with <code>--featurize-with-hyperparams</code> or <code>-h</code>.</p> <p>Each featurizer should be passed in dictionary format with one or more valid hyperparameters defined, like this:</p> <pre><code>{\n\"HPPCResistanceVoltageFeatures\":\n      {\n\"diag_pos\": 1,\n        \"soc_window\": 8,\n      }\n}\n</code></pre> <pre><code>$: beep featurize -h '{\"HPPCResistanceVoltageFeatures\":{\"diag_pos\": 1, \"soc_window\": 8}}' my_structured_file.json\n</code></pre> <p>Hyperparameters not specified will be merged with the default hyperparameter dictionary defined for each featurizer. Consult the source code for full specifications of each hyperparameter dictionary for any featurizer.</p> <p>To apply multiple featurizers with custom hyperparameters (even the same featurizer class with different hyperparameters), simply use multiple separate <code>--featurize-with-hyperparams</code> options:</p> <pre><code>$: beep featurize -h '{\"HPPCResistanceVoltageFeatures\":{\"diag_pos\": 1, \"soc_window\": 8}}' \\\n-h '{\"HPPCResistanceVoltageFeatures\":{\"diag_pos\": 47, \"soc_window\": 10}}' \\\n-h '{\"DiagnosticSummaryStats\": {\"test_time_filter_sec\": 1e4}}' \\\nmy_structured_file.json\n</code></pre>"},{"location":"Command%20Line%20Interface/3%20-%20featurize/#your-own-featurizers","title":"Your own featurizers","text":"<p><code>beep featurize</code> also works with external featurizers than inherit the <code>BEEPFeaturizer</code> class. </p> <p>Instead of using the class name to identify the featurizer, use <code>--featurize-with*</code> options with the full module and class name of your custom featurizer.</p> <p>For example, if your featurizer inheriting <code>BEEPFeaturizer</code> is installed in your environment in a module <code>my_pkg.my_module.my_submodule.MyClass</code>, do:</p> <pre><code>$: beep featurize -f my_pkg.my_module.my_submodule.MyClass my_structured_file.json\n</code></pre> <p>Similar to the core featurizers, calling external featurizers with <code>--featurize-with</code> will call them with the default hyperparameters. Using custom hyperparameters should use the same format as <code>--featurize-with-hyperparams</code>, a dictionary with the only key being the fully specified class name and the value being a dictionary of hyperparameters to override:</p> <pre><code>$: beep featurize -h '{\"my_pkg.my_module.my_submodule.MyClass\": {\"my_hp1\": 12}}' \\\nmy_structured_file.json\n</code></pre> <p>Any number of external featurizers can be used alongside any number of builtin featurizers in the same command by passing multiple <code>--featurize-with</code> options:</p> <pre><code>$: beep featurize -f HPPCResistanceVoltageFeatures \\\n-h '{\"my_pkg.my_module.my_submodule.MyClass\": {\"my_hp1\": 12}}' \\\nmy_structured_file.json\n</code></pre>"},{"location":"Command%20Line%20Interface/4%20-%20train/","title":"Train","text":"<p><code>beep train</code> is a one line command to perform hyperparameter tuning and model fitting on previously generated feature matrices.</p> <p>As input, <code>beep train</code> takes:</p> <ul> <li>the feature matrix file containing the features for learning</li> <li>the feature matrix file containing the targets (e.g., degradation-related metrics) to fit on</li> </ul> <p>As output, <code>beep train</code> produces a single json file of the serialized model. </p> <p></p>"},{"location":"Command%20Line%20Interface/4%20-%20train/#train-help-dialog","title":"Train help dialog","text":"<pre><code>$: beep train --help\n\nUsage: beep train [OPTIONS]\nTrain a machine learning model using all available data and save it to file.\n\nOptions:\n  -o, --output-filename FILE      Filename (json) to write the BEEP linear\n                                  model object to when training is finished.\n  -fm, --feature-matrix-file FILE\n                                  Featurization matrix serialized to file,\n                                  containing features (X) for learning.\n                                  Featurization matrices can be generated by\n                                  the beep featurize command.  [required]\n-tm, --target-matrix-file FILE  Featurization matrix serialized to file,\n                                  containing targets (one y or more) for\nlearning. Featurization matrices can be\n                                  generated by the beep featurize command.\n                                  [required]\n-t, --targets TEXT              Target columns to as from target matrix\n                                  file. Must all be present in the target\n                                  matrix file. If more than 1 is specified\n                                  (e.g., -t 'col1' -t 'col2'), multitask\n                                  regression will be performed. Column names\n                                  will be '&lt;Feature Name&gt;::&lt;Featurizer Class\n                                  Name&gt;' if --homogenize-features is set. If\n                                  not, column names include long parameter\n                                  hashes which must be included in this\n                                  argument option.  [required]\n-m, --model-name TEXT           Name of the regularized linear model to use.\n                                  Current selection includes ('elasticnet',\n                                  'ridge', 'lasso').  [required]\n-s, --train-on-frac-and-score FLOAT\n                                  Do hyperparameter tuning on part (a training\n                                  fraction) of the dataset and use that fitted\n                                  model to predict on a testing fraction of\n                                  the dataset. Specify the training fraction\n                                  as a float 0-1.\n  -al, --alpha-lower FLOAT        Lower bound on the grid for the alpha\n                                  hyperparameter  which will be explored\n                                  during hyperparameter tuning. Must be\n                                  specified with --alpha-upper and --n-alphas.\n  -au, --alpha-upper FLOAT        Upper bound on the grid for the alpha\n                                  hyperparameter  which will be explored\n                                  during hyperparameter tuning. Must be\n                                  specified with --alpha-lower and --n-alphas.\n  -an, --n-alphas FLOAT           Number of linearly spaced alphas to explore\n                                  during hyperparameter tuning. If not\n                                  specified, sklearn defaults are used. Must\n                                  be specified with --alpha-upper and --alpha-\n                                  lower.\n  --train-feature-nan-thresh FLOAT\n                                  Threshold to keep a feature in the training\n                                  dataset, in fraction of samples which must\n                                  not be nan from 0-1. 0 = any feature having\n                                  any nan is dropped, 1 = no features are\n                                  dropped.\n  --train-sample-nan-thresh FLOAT\n                                  Threshold to keep a sample from the training\n                                  data, in fraction of features which must not\n                                  be nan from 0-1. 0 = any sample having any\n                                  nan feature is dropped, 1 = no samples are\n                                  dropped.\n  --predict-sample-nan-thresh FLOAT\n                                  Threshold to keep a sample from any\n                                  prediction set, including those used\n                                  internally, in fraction of features which\n                                  must notbe nan.\n  --drop-nan-training-targets     Drop samples containing any nan targets. If\n                                  False and the targets matrix has nan\n                                  targets, the command will fail.\n  --impute-strategy TEXT          Type of imputation to use, 'median', 'mean',\n                                  or 'none'.\n  --kfold INTEGER                 Number of folds to use in k-fold\n                                  hyperparameter tuning.\n  --max-iter INTEGER              Number of iterations during training to fit\n                                  linear parameters.\n  --tol FLOAT                     Tolerance for optimization.\n  --l1-ratios TEXT                Comma separated l1 ratios to try in\nhyperparameter optimization.For example,\n                                  '0.1,0.5,0.7,0.9,0.95,1.0', and all values\n                                  must be between 0-1.\n  --homogenize-features BOOLEAN   Shorten feature names to only include the\n                                  featurizer name and (very short) feature\n                                  name. For example,\n                                  'capacity_0.8::TrajectoryFastCharge', where\n                                  features normally have names including their\n                                  (long) parameter hashes. To use the literal\n                                  feature names, specify False.\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"Command%20Line%20Interface/4%20-%20train/#specifying-inputs","title":"Specifying inputs","text":"<p><code>beep train</code> requires two input files:</p>"},{"location":"Command%20Line%20Interface/4%20-%20train/#-feature-matrix-file-fm","title":"<code>--feature-matrix-file</code>/<code>-fm</code>","text":"<p>The path to a serialized feature matrix file, such as those generated with <code>beep featurize</code> . These will be the learning features for the model.</p>"},{"location":"Command%20Line%20Interface/4%20-%20train/#-target-matrix-file-tm","title":"<code>--target-matrix-file</code>/<code>-tm</code>","text":"<p>The path to a serialized feature matrix file, such as those generated with <code>beep featurize</code>. These will be the learning targets for the model.</p> <p>Note: The feature matrix file and the target matrix file MUST be generated using the same set of structured json files, otherwise they will not correspond to the same cycler runs and errors will be thrown.</p>"},{"location":"Command%20Line%20Interface/4%20-%20train/#other-required-args","title":"Other required args","text":"<p>You must also specify one or more <code>--targets</code>/<code>-t</code>, which are column names in the target matrix file. These will be the actual learning targets selected from the input files.</p> <p>Finally, you must specify a <code>--model-name</code>/<code>-m</code> for the liner model. See the Train help dialog for specifics.</p>"},{"location":"Command%20Line%20Interface/4%20-%20train/#specifying-outputs","title":"Specifying outputs","text":"<p><code>beep train</code> outputs a single file which by default will be automatically named. To specify your own output filename, pass <code>--output-filename</code>.</p>"},{"location":"Command%20Line%20Interface/4%20-%20train/#model-parameters-and-options","title":"Model parameters and options","text":""},{"location":"Command%20Line%20Interface/4%20-%20train/#model-parameters-and-hyperparameters","title":"Model parameters and hyperparameters","text":"<p>You can pass many model parameters and options for hyperparameter tuning (such as defining the alpha parameter space to search) with command line options:</p> <ul> <li><code>--model</code>: The name of the model to use</li> <li><code>--alpha-lower</code>: The lower bound on alpha during hyperparameter search</li> <li><code>--alpha-upper</code>: The higher bound on alpha during hyperparameter search</li> <li><code>--n-alphas</code>: The number of linearly spaces alphas between alpha lower and alpha upper to include in the grid.</li> <li><code>--kfold</code>: The number of folds k to use for cross validation in hyperparameter tuning.</li> <li><code>--max-iter</code>: The max number of iterations to search for optimal hyperparameters during training/tuning.</li> <li><code>--tol</code>: The tolerate for hyperparameter optimization.</li> <li><code>--l1-ratios</code>: A comma-separated list of L1 ratios to search when using ElasticNet.</li> </ul>"},{"location":"Command%20Line%20Interface/4%20-%20train/#data-cleaning-options","title":"Data cleaning options","text":"<p><code>beep train</code> automatically cleans and prepares data for input into an ML experiment. Several options for specifying data cleaning procedures are outlined below:</p> <ul> <li><code>--train-feature-nan-thresh</code>: Threshold for keeping training features with some samples containing NaNs.</li> <li><code>--train-sample-nan-thresh</code>: Threshold for keeping training samples with some features containing NaNs.</li> <li><code>--predict-sample-nan-thresh</code>: Threshold for keeping prediction samples with some features containing NaNs.</li> <li><code>--drop-nan-training-targets</code>: Flag to drop any samples without a valid training target.</li> <li><code>--impute-strategy</code>: The strategy for imputing unknown values such as NaNs which are left over after dropping NaNs according to thresholds.</li> </ul>"},{"location":"Command%20Line%20Interface/4%20-%20train/#running-a-traintest-experiment","title":"Running a train/test experiment","text":"<p>By default, <code>beep train</code> will train the final model on all available data after determining optimal hyperparameters. However, to run a training and test experiment with the CLI,  pass the <code>--train-on-frac-and-score</code> parameter, which will train and tune on the specified fraction of data and test on the remainder.</p> <p>The results of training and testing errors will be reported in the status json if <code>--output-status-json</code> is passed to the base <code>beep</code> command.</p>"},{"location":"Command%20Line%20Interface/5%20-%20predict/","title":"Predict","text":"<p><code>beep predict</code> runs previously trained models to predict degradation characteristics based on a new input feature matrix.</p> <p><code>beep predict</code> takes in a previously trained model json file (e.g., trained with <code>beep train</code> and a previously generated feature matrix (e.g., generated with <code>beep featurize</code>) which you want ML predictions for. Each row in this input dataframe corresponds to a single cycler file.</p> <p>The output is a dataframe of predictions of degradation characteristics for each file, serialized to disk as json. For example:</p> <pre><code>target_matrix\n                         predicted capacity_0.92::TrajectoryFastCharge\nfilename                           file1_to_predict                         287  file2_to_predict                          59 file3_to_predict                          82 file4_to_predict                         103\n</code></pre> <p></p>"},{"location":"Command%20Line%20Interface/5%20-%20predict/#predict-help-dialog","title":"Predict help dialog","text":"<pre><code>$: beep predict --help\n\nUsage: beep predict [OPTIONS] MODEL_FILE\n\nRun a previously trained model to predict degradation targets.The MODEL_FILE\n  passed should be an output of 'beep train' or aserialized\n  BEEPLinearModelExperiment object.\n\nOptions:\n  -fm, --feature-matrix-file TEXT\n                                  Feature matrix to use as input to the model.\n                                  Predictions are basedon these features.\n                                  [required]\n-o, --output-filename FILE      Filename (json) to write the final predicted\n                                  dataframe to.\n  --predict-sample-nan-thresh FLOAT\n                                  Threshold to keep a sample from any\n                                  prediction set.\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"Command%20Line%20Interface/5%20-%20predict/#specifying-inputs","title":"Specifying inputs","text":"<p><code>beep predict</code> requires two files as input:</p> <ol> <li>A previously trained model file, which can be generated with <code>beep train</code> or in python via <code>BEEPLinearModelExperiment</code>.</li> <li>A feature matrix file of features for new files for which you want degradation predictions</li> <li>The feature matrix file must have at least the features required by the trained model. Extra features will be automatically dropped.</li> </ol> <p>The single model file is specified with the required argument <code>MODEL_FILE</code> (no globs) and the feature matrix is specified with <code>--feature-matrix-file</code>/<code>-fm</code>.</p> <p>For example:</p> <pre><code>$: beep predict -fm /path/to/my/featurematix.json.gz /path/to/my/previously_trained_model.json.gz\n</code></pre>"},{"location":"Command%20Line%20Interface/5%20-%20predict/#specifying-output","title":"Specifying output","text":"<p>The output is a single serialized dataframe, which is by default auto-named but can be overridden by <code>--output-filename</code>/<code>-o</code>.</p> <pre><code>$: beep predict -fm /path/to/my/featurematix.json.gz \\\n-o my_output_predictions.json\n  /path/to/my/previously_trained_model.json.gz\n</code></pre>"},{"location":"Command%20Line%20Interface/6%20-%20protocol/","title":"Protocol","text":"<p>Warning: <code>beep protocol</code> is still being migrated from a previous codebase; may be unstable.</p> <p><code>beep protocol</code> protocol programmatically generates files for running battery experiments. </p> <p>The input to <code>beep protocol</code> is a singe csv file with various parameters specified, for example:</p> <pre><code>project_name,seq_num,template,charge_constant_current_1,charge_percent_limit_1,charge_constant_current_2,charge_cutoff_voltage,charge_constant_voltage_time,charge_rest_time,discharge_profile,profile_charge_limit,max_profile_power,n_repeats,discharge_cutoff_voltage,power_scaling,discharge_rest_time,cell_temperature_nominal,cell_type,capacity_nominal,diagnostic_type,diagnostic_parameter_set,diagnostic_start_cycle,diagnostic_interval\nDrive,100,diagnosticV5.000,1,30,1,4.1,30,5,US06,4.2,40,4,2.7,0.60,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,101,diagnosticV5.000,1,30,1,4.1,30,5,LA4,4.2,40,4,2.7,0.27,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,102,diagnosticV5.000,1,30,1,4.1,30,5,US06,4.2,40,4,2.7,0.80,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,103,diagnosticV5.000,1,30,1,4.1,30,5,LA4,4.2,40,4,2.7,0.36,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,104,diagnosticV5.000,1,30,1,4.1,30,5,US06,4.2,40,4,2.7,1.00,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,105,diagnosticV5.000,1,30,1,4.1,30,5,LA4,4.2,40,4,2.7,0.45,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,106,diagnosticV5.000,1,30,1,4.1,30,5,US06,4.2,40,8,2.7,0.60,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,107,diagnosticV5.000,1,30,1,4.1,30,5,LA4,4.2,40,8,2.7,0.27,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,108,diagnosticV5.000,1,30,1,4.1,30,5,US06,4.2,40,8,2.7,0.80,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,109,diagnosticV5.000,1,30,1,4.1,30,5,LA4,4.2,40,8,2.7,0.36,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,110,diagnosticV5.000,1,30,1,4.1,30,5,US06,4.2,40,8,2.7,1.00,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,111,diagnosticV5.000,1,30,1,4.1,30,5,LA4,4.2,40,8,2.7,0.45,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,112,diagnosticV5.000,1,30,1,4.1,30,5,US06,4.2,40,12,2.7,0.60,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,113,diagnosticV5.000,1,30,1,4.1,30,5,LA4,4.2,40,12,2.7,0.27,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,114,diagnosticV5.000,1,30,1,4.1,30,5,US06,4.2,40,12,2.7,0.80,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,115,diagnosticV5.000,1,30,1,4.1,30,5,LA4,4.2,40,12,2.7,0.36,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,116,diagnosticV5.000,1,30,1,4.1,30,5,US06,4.2,40,12,2.7,1.00,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,117,diagnosticV5.000,1,30,1,4.1,30,5,LA4,4.2,40,12,2.7,0.45,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,118,diagnosticV5.000,1,30,1,3.9,30,5,US06,4.2,40,4,2.7,0.60,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,119,diagnosticV5.000,1,30,1,3.9,30,5,LA4,4.2,40,4,2.7,0.27,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,120,diagnosticV5.000,1,30,1,3.9,30,5,US06,4.2,40,4,2.7,0.80,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,121,diagnosticV5.000,1,30,1,3.9,30,5,LA4,4.2,40,4,2.7,0.36,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,122,diagnosticV5.000,1,30,1,3.9,30,5,US06,4.2,40,4,2.7,1.00,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,123,diagnosticV5.000,1,30,1,3.9,30,5,LA4,4.2,40,4,2.7,0.45,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,124,diagnosticV5.000,1,30,1,3.9,30,5,US06,4.2,40,8,2.7,0.60,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,125,diagnosticV5.000,1,30,1,3.9,30,5,LA4,4.2,40,8,2.7,0.27,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,126,diagnosticV5.000,1,30,1,3.9,30,5,US06,4.2,40,8,2.7,0.80,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,127,diagnosticV5.000,1,30,1,3.9,30,5,LA4,4.2,40,8,2.7,0.36,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,128,diagnosticV5.000,1,30,1,3.9,30,5,US06,4.2,40,8,2.7,1.00,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,129,diagnosticV5.000,1,30,1,3.9,30,5,LA4,4.2,40,8,2.7,0.45,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,130,diagnosticV5.000,1,30,1,3.9,30,5,US06,4.2,40,12,2.7,0.60,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,131,diagnosticV5.000,1,30,1,3.9,30,5,LA4,4.2,40,12,2.7,0.27,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,132,diagnosticV5.000,1,30,1,3.9,30,5,US06,4.2,40,12,2.7,0.80,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,133,diagnosticV5.000,1,30,1,3.9,30,5,LA4,4.2,40,12,2.7,0.36,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,134,diagnosticV5.000,1,30,1,3.9,30,5,US06,4.2,40,12,2.7,1.00,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\nDrive,135,diagnosticV5.000,1,30,1,3.9,30,5,LA4,4.2,40,12,2.7,0.45,15,25,Tesla_Model3_21700,4.84,HPPC+RPT,Tesla21700,30,200\n</code></pre> <p>The output of <code>beep protocol</code> is a set of ready-to-use battery cycler protocols.</p> <p>More documentation for <code>beep protocol</code> coming soon.</p> <p></p>"},{"location":"Command%20Line%20Interface/6%20-%20protocol/#protocol-help-dialog","title":"Protocol help dialog","text":"<pre><code>$: beep protocol --help\n\nUsage: beep protocol [OPTIONS] CSV_FILE\n\nGenerate protocol for battery cyclers from a csv file input.\n\nOptions:\n  -d, --output-dir TEXT  Directory to output files to. At least three subdirs\n                         will be created in this directoryin order to organize\n                         the generated protocol files.\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"Command%20Line%20Interface/6%20-%20protocol/#more-documentation-coming-soon","title":"More documentation coming soon!","text":""},{"location":"Command%20Line%20Interface/7%20-%20inspect/","title":"Inspect","text":"<p>BEEP inspect is a debugging and analysis command which can be used to examine any  serialized beep object directly from the command line.</p> <p>The objects that can be inspected are:</p> <ul> <li>Raw cycler files compatible with BEEP, which will be ingested and represented as a <code>BEEPDatapath</code>. Example: Inspect Raw Files</li> <li>Structured cycler files serialized by BEEP to disk as json, represented as a <code>BEEPDatapath</code>. Example: Inspect Structured Files</li> <li>Feature matrices serialized to disk as json. Example: Inspect Feature Matrices</li> <li>Individual <code>BEEPFeaturizer</code>s serialized to disk as json. Example: Inspect Featurizers</li> <li>Linear <code>BEEPLinearModelExperiment</code>s serialized to disk as json. Example: Inspect Models</li> </ul>"},{"location":"Command%20Line%20Interface/7%20-%20inspect/#inspect-help-dialog","title":"Inspect help dialog","text":"<pre><code>$: beep inspect --help\n\nUsage: beep inspect [OPTIONS] FILE\n\nView BEEP files for debugging and analysis.\n\nOptions:\n  --help  Show this message and exit.\n</code></pre>"},{"location":"Command%20Line%20Interface/7%20-%20inspect/#inspect-raw-files","title":"Inspect Raw Files","text":"<p>Example:</p> <pre><code>S: beep inspect PreDiag_000287_000128.092\n\n2021-09-22 16:01:33 DEBUG    Loaded potential raw file beep/tests/test_files/PreDiag_000287_000128.092 as Datapath.\n2021-09-22 16:01:34 INFO     Loaded beep/tests/test_files/PreDiag_000287_000128.092 as type &lt;class 'beep.structure.maccor.MaccorDatapath'&gt;.\n\nBEEP Datapath: beep/tests/test_files/PreDiag_000287_000128.092\n\nSemiunique id: 'barcode:000128-channel:92-protocol:PreDiag_000287.000-schema:beep/validation_schemas/schema-maccor-2170.yaml-structured:False-legacy:False-raw_path:beep/tests/test_files/PreDiag_000287_000128.092-structured_path:None'\nFile paths\n{'metadata': 'beep/tests/test_files/PreDiag_000287_000128.092',\n 'raw': 'beep/tests/test_files/PreDiag_000287_000128.092'}\nFile metadata:\n{'_today_datetime': '12/17/2019',\n 'barcode': '000128',\n 'channel_id': 92,\n 'filename': 'C:\\\\Users\\\\Maccor Tester User\\\\Documents\\\\Backup\\\\STANFORD '\n'LOANER #1\\\\STANFORD LOANER #1\\\\PreDiag_000287_000128.092',\n 'protocol': 'PreDiag_000287.000',\n 'start_datetime': '12/17/2019'}\nValidation schema: beep/validation_schemas/schema-maccor-2170.yaml\n\nStructuring parameters:\n{}\nStructured attributes:\n\nstructured_summary:\n        No object.\n\nstructured_data:\n        No object.\n\ndiagnostic_data:\n        No object.\n\ndiagnostic_summary:\n        No object.\n\nraw_data:\n        data_point  cycle_index  step_index   test_time     step_time  _capacity    _energy   current   voltage _state _ending_status            date_time  loop1  loop2  loop3  loop4  ac_impedence  internal_resistance  _wf_chg_cap  _wf_dis_cap  ...  _var2  _var3  _var4  _var5  _var6  _var7  _var8  _var9  _var10  _var11  _var12  _var13  _var14  _var15  charge_capacity  discharge_capacity  charge_energy  discharge_energy              date_time_iso  temperature\n0                1            0           1        0.00      0.000000   0.000000   0.000000  0.000000  3.458076      R              0  12/17/2019 09:51:51      0      0      0      0           0.0                  0.0          NaN          NaN  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0     0.0     0.0     0.0     0.0     0.0         0.000000            0.000000       0.000000          0.000000  2019-12-17T17:51:51+00:00          NaN\n1                2            0           1       30.00     30.000000   0.000000   0.000000  0.000000  3.457999      R              1  12/17/2019 09:52:20      0      0      0      0           0.0                  0.0          NaN          NaN  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0     0.0     0.0     0.0     0.0     0.0         0.000000            0.000000       0.000000          0.000000  2019-12-17T17:52:20+00:00          NaN\n2                3            0           1       60.00     60.000000   0.000000   0.000000  0.000000  3.457999      R              1  12/17/2019 09:52:50      0      0      0      0           0.0                  0.0          NaN          NaN  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0     0.0     0.0     0.0     0.0     0.0         0.000000            0.000000       0.000000          0.000000  2019-12-17T17:52:50+00:00          NaN\n3                4            0           1       89.42     89.419998   0.000000   0.000000  0.000000  3.458152      S            192  12/17/2019 09:53:20      0      0      0      0           0.0                  0.0          NaN          NaN  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0     0.0     0.0     0.0     0.0     0.0         0.000000            0.000000       0.000000          0.000000  2019-12-17T17:53:20+00:00          NaN\n4                5            0           1       89.42     89.419998   0.000000   0.000000  0.000000  3.458228      R            192  12/17/2019 11:15:57      0      0      0      0           0.0                  0.0          NaN          NaN  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0     0.0     0.0     0.0     0.0     0.0         0.000000            0.000000       0.000000          0.000000  2019-12-17T19:15:57+00:00          NaN\n...            ...          ...         ...         ...           ...        ...        ...       ...       ...    ...            ...                  ...    ...    ...    ...    ...           ...                  ...          ...          ...  ...    ...    ...    ...    ...    ...    ...    ...    ...     ...     ...     ...     ...     ...     ...              ...                 ...            ...               ...                        ...          ...\n546943      546944          246          39  1958303.97  23211.070312   4.459139  16.402617 -0.691691  2.700771      D              5  01/09/2020 03:18:48  64541     22      0      0           0.0                  0.0          NaN          NaN  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0     0.0     0.0     0.0     0.0     0.0         2.011044            4.459139       8.126739         16.402617  2020-01-09T11:18:48+00:00          NaN\n546944      546945          246          39  1958305.13  23212.230469   4.459362  16.403219 -0.691691  2.700008      D            133  01/09/2020 03:18:49  64541     22      0      0           0.0                  0.0          NaN          NaN  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0     0.0     0.0     0.0     0.0     0.0         2.011044            4.459362       8.126739         16.403219  2020-01-09T11:18:49+00:00          NaN\n546945      546946          247          41  1958305.16      0.030000   0.000006   0.000016  1.618448  2.760967      C              0  01/09/2020 03:18:49  64541     22      0      0           0.0                  0.0          NaN          NaN  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0     0.0     0.0     0.0     0.0     0.0         2.011050            4.459362       8.126755         16.403219  2020-01-09T11:18:49+00:00          NaN\n546946      546947          247          41  1958305.32      0.190000   0.000078   0.000215  1.612268  2.777752      C              5  01/09/2020 03:18:49  64541     22      0      0           0.0                  0.0          NaN          NaN  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0     0.0     0.0     0.0     0.0     0.0         2.011122            4.459362       8.126954         16.403219  2020-01-09T11:18:49+00:00          NaN\n546947      546948          247          41  1958305.42      0.290000   0.000122   0.000340  1.612039  2.784771      C              5  01/09/2020 03:18:49  64541     22      0      0           0.0                  0.0          NaN          NaN  ...    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0     0.0     0.0     0.0     0.0     0.0         2.011167            4.459362       8.127079         16.403219  2020-01-09T11:18:49+00:00          NaN\n\n[546948 rows x 44 columns]\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 546948 entries, 0 to 546947\nData columns (total 44 columns):\n #   Column               Non-Null Count   Dtype   \n---  ------               --------------   -----   0   data_point           546948 non-null  int32   1   cycle_index          546948 non-null  int32   2   step_index           546948 non-null  int16   3   test_time            546948 non-null  float64 4   step_time            546948 non-null  float32 5   _capacity            546948 non-null  float64 6   _energy              546948 non-null  float64 7   current              546948 non-null  float32 8   voltage              546948 non-null  float32 9   _state               546948 non-null  object  10  _ending_status       546948 non-null  category\n 11  date_time            546948 non-null  object  12  loop1                546948 non-null  int64   13  loop2                546948 non-null  int64   14  loop3                546948 non-null  int64   15  loop4                546948 non-null  int64   16  ac_impedence         546948 non-null  float32 17  internal_resistance  546948 non-null  float32 18  _wf_chg_cap          0 non-null       float32 19  _wf_dis_cap          0 non-null       float32 20  _wf_chg_e            0 non-null       float32 21  _wf_dis_e            0 non-null       float32 22  _range               546948 non-null  uint8   23  _var1                546948 non-null  float16 24  _var2                546948 non-null  float16 25  _var3                546948 non-null  float16 26  _var4                546948 non-null  float16 27  _var5                546948 non-null  float16 28  _var6                546948 non-null  float16 29  _var7                546948 non-null  float16 30  _var8                546948 non-null  float16 31  _var9                546948 non-null  float16 32  _var10               546948 non-null  float16 33  _var11               546948 non-null  float16 34  _var12               546948 non-null  float16 35  _var13               546948 non-null  float16 36  _var14               546948 non-null  float16 37  _var15               546948 non-null  float16 38  charge_capacity      546948 non-null  float64 39  discharge_capacity   546948 non-null  float64 40  charge_energy        546948 non-null  float64 41  discharge_energy     546948 non-null  float64 42  date_time_iso        546948 non-null  object  43  temperature          0 non-null       float64 dtypes: category(1), float16(15), float32(9), float64(8), int16(1), int32(2), int64(4), object(3), uint8(1)\nmemory usage: 103.3+ MB\n</code></pre>"},{"location":"Command%20Line%20Interface/7%20-%20inspect/#inspect-structured-files","title":"Inspect Structured Files","text":"<p>Example:</p> <pre><code>$: beep inspect 2017-12-04_4_65C-69per_6C_CH29_structured_new.json.gz\n\n2021-09-22 16:04:01 INFO     Loaded beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29_structured_new.json.gz as type &lt;class 'beep.structure.arbin.ArbinDatapath'&gt;.\n\nBEEP Datapath: beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29_structured_new.json.gz\n\nSemiunique id: 'barcode:EL151000429559-channel:28-protocol:2017-12-04_tests\\20170630-4_65C_69per_6C.sdu-schema:beep/validation_schemas/schema-arbin-lfp.yaml-structured:True-legacy:True-raw_path:beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29.csv-structured_path:None'\nFile paths\n{'metadata': 'beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29_Metadata.csv',\n 'raw': 'beep/tests/test_files/2017-12-04_4_65C-69per_6C_CH29.csv'}\nFile metadata:\n{'barcode': 'EL151000429559',\n 'channel_id': 28,\n 'protocol': '2017-12-04_tests\\\\20170630-4_65C_69per_6C.sdu'}\nValidation schema: beep/validation_schemas/schema-arbin-lfp.yaml\n\nStructuring parameters:\n{'charge_axis': 'charge_capacity',\n 'diagnostic_available': False,\n 'diagnostic_resolution': 500,\n 'discharge_axis': 'voltage',\n 'full_fast_charge': 0.8,\n 'nominal_capacity': 1.1,\n 'resolution': 1000,\n 'v_range': None}\nStructured attributes:\n\nstructured_summary:\n     cycle_index  discharge_capacity  charge_capacity  discharge_energy  charge_energy  dc_internal_resistance  temperature_maximum  temperature_average  temperature_minimum              date_time_iso  energy_efficiency  charge_throughput  energy_throughput  charge_duration  time_temperature_integrated  paused       CV_time  CV_current\n0              0            1.940235         1.432850          6.142979       4.725729                0.029954            34.222515            32.666893            20.699526  2017-12-05T03:37:36+00:00           1.299901           1.432850           4.725729          32768.0                 48977.078333   13312  50158.164062    0.000029\n1              1            1.060343         1.061786          3.219735       3.703581                0.017906            35.375809            32.387295            30.235437  2017-12-06T04:33:04+00:00           0.869357           2.494636           8.429310            640.0                  1927.509119       0   1577.987427    0.062837\n2              2            1.065412         1.065450          3.235807       3.708392                0.017649            35.384602            32.472481            30.254265  2017-12-06T05:32:48+00:00           0.872563           3.560086          12.137702            640.0                  1931.514632       0   1570.970459    0.046215\n3              3            1.066605         1.066726          3.238866       3.711425                0.017506            35.265358            32.420013            30.159765  2017-12-06T06:32:32+00:00           0.872675           4.626812          15.849127            640.0                  1995.445402       0   1552.032471    0.045087\n4              4            1.066988         1.067148          3.239955       3.712645                0.017409            35.280449            32.407478            30.157305  2017-12-06T07:34:24+00:00           0.872681           5.693960          19.561773            512.0                  1926.752726       0   1548.414551    0.052290\n..           ...                 ...              ...               ...            ...                     ...                  ...                  ...                  ...                        ...                ...                ...                ...              ...                          ...     ...           ...         ...\n183          183            1.033595         1.033812          3.046869       3.615792                0.016889            37.566158            32.988796            30.226278  2017-12-13T19:12:00+00:00           0.842656         194.065491         676.183533            640.0                  2026.858687       0   1590.061523    0.034429\n184          184            1.033454         1.033584          3.042845       3.613951                0.016827            37.129795            32.981796            30.181578  2017-12-13T20:13:52+00:00           0.841972         195.099075         679.797485            640.0                  1955.320325       0   1589.661377    0.031118\n185          185            1.032677         1.032898          3.040163       3.612450                0.016875            37.126766            32.851368            30.145836  2017-12-13T21:13:36+00:00           0.841579         196.131973         683.409912            640.0                  1950.674312       0   1530.225342    0.021825\n186          186            1.032823         1.033198          3.041561       3.613732                0.016875            37.236954            32.925690            30.300278  2017-12-13T22:13:20+00:00           0.841668         197.165176         687.023682            640.0                  1954.338322       0   1590.264771    0.026628\n187          187            1.032616         1.032862          3.039321       3.612212                0.016840            37.159687            32.952461            30.114653  2017-12-13T23:13:04+00:00           0.841402         198.198029         690.635864            640.0                  1955.141357       0   1590.173706    0.025024\n\n[188 rows x 18 columns]\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 188 entries, 0 to 187\nData columns (total 18 columns):\n #   Column                       Non-Null Count  Dtype  \n---  ------                       --------------  -----  0   cycle_index                  188 non-null    int32  1   discharge_capacity           188 non-null    float64\n 2   charge_capacity              188 non-null    float64\n 3   discharge_energy             188 non-null    float64\n 4   charge_energy                188 non-null    float64\n 5   dc_internal_resistance       188 non-null    float32\n 6   temperature_maximum          188 non-null    float32\n 7   temperature_average          188 non-null    float32\n 8   temperature_minimum          188 non-null    float32\n 9   date_time_iso                188 non-null    object 10  energy_efficiency            188 non-null    float32\n 11  charge_throughput            188 non-null    float32\n 12  energy_throughput            188 non-null    float32\n 13  charge_duration              188 non-null    float32\n 14  time_temperature_integrated  188 non-null    float64\n 15  paused                       188 non-null    int32  16  CV_time                      188 non-null    float32\n 17  CV_current                   188 non-null    float32\ndtypes: float32(10), float64(5), int32(2), object(1)\nmemory usage: 17.8+ KB\nNone\n\nstructured_data:\n         voltage     test_time   current  charge_capacity  discharge_capacity  charge_energy  discharge_energy  internal_resistance  temperature  cycle_index  step_type\n0       2.800000  88438.740972 -3.070090         1.319212            1.788713       4.354456          5.709161             0.028598    31.529890            0  discharge\n1       2.800701  85441.894275 -4.256237         1.370451            1.831461       4.519928          5.826991             0.029763    32.309685            0  discharge\n2       2.801401  58527.144191 -3.221379         0.921136            1.386086       3.038029          4.406347             0.028391    32.847729            0  discharge\n3       2.802102  31612.394108 -2.186522         0.471821            0.940710       1.556129          2.985704             0.027020    33.385773            0  discharge\n4       2.802803   4697.644024 -1.151665         0.022506            0.495335       0.074230          1.565060             0.025648    33.923817            0  discharge\n...          ...           ...       ...              ...                 ...            ...               ...                  ...          ...          ...        ...\n375995       NaN           NaN       NaN         1.427113                 NaN            NaN               NaN                  NaN          NaN          187     charge\n375996       NaN           NaN       NaN         1.428547                 NaN            NaN               NaN                  NaN          NaN          187     charge\n375997       NaN           NaN       NaN         1.429981                 NaN            NaN               NaN                  NaN          NaN          187     charge\n375998       NaN           NaN       NaN         1.431416                 NaN            NaN               NaN                  NaN          NaN          187     charge\n375999       NaN           NaN       NaN         1.432850                 NaN            NaN               NaN                  NaN          NaN          187     charge\n\n[376000 rows x 11 columns]\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 376000 entries, 0 to 375999\nData columns (total 11 columns):\n #   Column               Non-Null Count   Dtype   \n---  ------               --------------   -----   0   voltage              325974 non-null  float32 1   test_time            325974 non-null  float64 2   current              325974 non-null  float32 3   charge_capacity      376000 non-null  float32 4   discharge_capacity   325974 non-null  float32 5   charge_energy        325974 non-null  float32 6   discharge_energy     325974 non-null  float32 7   internal_resistance  325974 non-null  float32 8   temperature          325974 non-null  float32 9   cycle_index          376000 non-null  int32   10  step_type            376000 non-null  category\ndtypes: category(1), float32(8), float64(1), int32(1)\nmemory usage: 16.1 MB\nNone\n\ndiagnostic_data:\n        No object.\n\ndiagnostic_summary:\n        No object.\n\nraw_data:\n        No object.\n</code></pre>"},{"location":"Command%20Line%20Interface/7%20-%20inspect/#inspect-feature-matrices","title":"Inspect Feature Matrices","text":"<p>Example:</p> <pre><code>S: beep inspect FeatureMatrix-2021-21-09_20.50.32.550211.json.gz 2021-09-22 15:54:23 INFO     Loaded FeatureMatrix-2021-21-09_20.50.32.550211.json.gz as type &lt;class 'beep.features.base.BEEPFeatureMatrix'&gt;.\n\nBEEP Feature Matrix: FeatureMatrix-2021-21-09_20.50.32.550211.json.gz\n\nFeaturizers:\n\nFeaturizer beep.features.core HPPCResistanceVoltageFeatures\n        {'@class': 'HPPCResistanceVoltageFeatures',\n         '@module': 'beep.features.core',\n         'hyperparameters': {'cycle_index_filter': 6,\n                             'diag_pos': 1,\n                             'parameters_path': 'beep/protocol_parameters',\n                             'soc_window': 8,\n                             'test_time_filter_sec': 1000000},\n         'linked_datapath_semiunique_id': 'barcode:0000FB-channel:50-protocol:PreDiag_000440.000-schema:None-structured:True-legacy:True-raw_path:None-structured_path:beep/tests/test_files/PreDiag_000440_0000FB_structure.json',\n         'metadata': {'barcode': '0000FB',\n                      'channel_id': 50,\n                      'protocol': 'PreDiag_000440.000'},\n         'paths': {'structured': 'beep/tests/test_files/PreDiag_000440_0000FB_structure.json'}}\nFeaturizer beep.features.core CycleSummaryStats\n        {'@class': 'CycleSummaryStats',\n         '@module': 'beep.features.core',\n         'hyperparameters': {'cycle_comp_num': [10, 100],\n                             'statistics': ['var',\n                                            'min',\n                                            'mean',\n                                            'skew',\n                                            'kurtosis',\n                                            'abs',\n                                            'square']},\n         'linked_datapath_semiunique_id': 'barcode:0000FB-channel:50-protocol:PreDiag_000440.000-schema:None-structured:True-legacy:True-raw_path:None-structured_path:beep/tests/test_files/PreDiag_000440_0000FB_structure.json',\n         'metadata': {'barcode': '0000FB',\n                      'channel_id': 50,\n                      'protocol': 'PreDiag_000440.000'},\n         'paths': {'structured': 'beep/tests/test_files/PreDiag_000440_0000FB_structure.json'}}\nFeaturizer beep.features.core CycleSummaryStats\n        {'@class': 'CycleSummaryStats',\n         '@module': 'beep.features.core',\n         'hyperparameters': {'cycle_comp_num': [11, 101],\n                             'statistics': ['var',\n                                            'min',\n                                            'mean',\n                                            'skew',\n                                            'kurtosis',\n                                            'abs',\n                                            'square']},\n         'linked_datapath_semiunique_id': 'barcode:0000FB-channel:50-protocol:PreDiag_000440.000-schema:None-structured:True-legacy:True-raw_path:None-structured_path:beep/tests/test_files/PreDiag_000440_0000FB_structure.json',\n         'metadata': {'barcode': '0000FB',\n                      'channel_id': 50,\n                      'protocol': 'PreDiag_000440.000'},\n         'paths': {'structured': 'beep/tests/test_files/PreDiag_000440_0000FB_structure.json'}}\nFeaturizer beep.features.core HPPCResistanceVoltageFeatures\n        {'@class': 'HPPCResistanceVoltageFeatures',\n         '@module': 'beep.features.core',\n         'hyperparameters': {'cycle_index_filter': 6,\n                             'diag_pos': 1,\n                             'parameters_path': 'beep/protocol_parameters',\n                             'soc_window': 8,\n                             'test_time_filter_sec': 1000000},\n         'linked_datapath_semiunique_id': 'barcode:00004C-channel:33-protocol:PredictionDiagnostics_000132.000-schema:None-structured:True-legacy:True-raw_path:None-structured_path:beep/tests/test_files/PredictionDiagnostics_000132_00004C_structure.json',\n         'metadata': {'barcode': '00004C',\n                      'channel_id': 33,\n                      'protocol': 'PredictionDiagnostics_000132.000'},\n         'paths': {'structured': 'beep/tests/test_files/PredictionDiagnostics_000132_00004C_structure.json'}}\nFeaturizer beep.features.core CycleSummaryStats\n        {'@class': 'CycleSummaryStats',\n         '@module': 'beep.features.core',\n         'hyperparameters': {'cycle_comp_num': [10, 100],\n                             'statistics': ['var',\n                                            'min',\n                                            'mean',\n                                            'skew',\n                                            'kurtosis',\n                                            'abs',\n                                            'square']},\n         'linked_datapath_semiunique_id': 'barcode:00004C-channel:33-protocol:PredictionDiagnostics_000132.000-schema:None-structured:True-legacy:True-raw_path:None-structured_path:beep/tests/test_files/PredictionDiagnostics_000132_00004C_structure.json',\n         'metadata': {'barcode': '00004C',\n                      'channel_id': 33,\n                      'protocol': 'PredictionDiagnostics_000132.000'},\n         'paths': {'structured': 'beep/tests/test_files/PredictionDiagnostics_000132_00004C_structure.json'}}\nFeaturizer beep.features.core CycleSummaryStats\n        {'@class': 'CycleSummaryStats',\n         '@module': 'beep.features.core',\n         'hyperparameters': {'cycle_comp_num': [11, 101],\n                             'statistics': ['var',\n                                            'min',\n                                            'mean',\n                                            'skew',\n                                            'kurtosis',\n                                            'abs',\n                                            'square']},\n         'linked_datapath_semiunique_id': 'barcode:00004C-channel:33-protocol:PredictionDiagnostics_000132.000-schema:None-structured:True-legacy:True-raw_path:None-structured_path:beep/tests/test_files/PredictionDiagnostics_000132_00004C_structure.json',\n         'metadata': {'barcode': '00004C',\n                      'channel_id': 33,\n                      'protocol': 'PredictionDiagnostics_000132.000'},\n         'paths': {'structured': 'beep/tests/test_files/PredictionDiagnostics_000132_00004C_structure.json'}}\nMatrix:\n                                                    D_1::HPPCResistanceVoltageFeatures::6262aa8b2c9ce9530d53f73943e5b465a1946f39be2ad2a3ede05f49e6f9f2d2  ...  var_v_diff::HPPCResistanceVoltageFeatures::6262aa8b2c9ce9530d53f73943e5b465a1946f39be2ad2a3ede05f49e6f9f2d2\nfilename                                                                                                                                                  ...                                                                                                             beep/tests/tes...                                          -0.075467                                                     ...                                           0.000186                                                          beep/tests/tes...                                          -0.090097                                                     ...                                           0.002462                                                          [2 rows x 132 columns]\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 2 entries, beep/tests/test_files/PreDiag_000440_0000FB_structure.json to beep/tests/test_files/PredictionDiagnostics_000132_00004C_structure.json\nColumns: 132 entries, D_1::HPPCResistanceVoltageFeatures::6262aa8b2c9ce9530d53f73943e5b465a1946f39be2ad2a3ede05f49e6f9f2d2 to var_v_diff::HPPCResistanceVoltageFeatures::6262aa8b2c9ce9530d53f73943e5b465a1946f39be2ad2a3ede05f49e6f9f2d2\ndtypes: float64(132)\nmemory usage: 2.1+ KB\n</code></pre>"},{"location":"Command%20Line%20Interface/7%20-%20inspect/#inspect-featurizers","title":"Inspect Featurizers","text":"<p>Example:</p> <pre><code>$: beep inspect HPPCFeaturizer.json.gz 2021-09-22 16:06:42 INFO     Loaded beep/tests/test_files/modelling_test_files/HPPCFeaturizer.json.gz as type &lt;class 'beep.features.core.HPPCResistanceVoltageFeatures'&gt;.\n\nBEEP Featurizer: beep/tests/test_files/modelling_test_files/HPPCFeaturizer.json.gz\n\nFile paths:\n{'structured': 'beep/CLI_TEST_FILES_FEATURIZATION/PreDiag_000440_0000FB_structure.json'}\nLinked datapath semiunique id: barcode:0000FB-channel:50-protocol:PreDiag_000440.000-schema:None-structured:True-legacy:True-raw_path:None-structured_path:beep/CLI_TEST_FILES_FEATURIZATION/PreDiag_000440_0000FB_structure.json\n\nHyperparameters:\n{'cycle_index_filter': 6,\n 'diag_pos': 1,\n 'parameters_path': 'beep/protocol_parameters',\n 'soc_window': 8,\n 'test_time_filter_sec': 1000000}\nMetadata:\n{'barcode': '0000FB', 'channel_id': 50, 'protocol': 'PreDiag_000440.000'}\nFeatures:\n   r_c_0s_00  r_c_0s_10  r_c_0s_20  r_c_0s_30  r_c_0s_40  r_c_0s_50  r_c_0s_60  r_c_0s_70  r_c_0s_80  r_c_3s_00  r_c_3s_10  r_c_3s_20  r_c_3s_30  r_c_3s_40  r_c_3s_50  r_c_3s_60  r_c_3s_70  r_c_3s_80  r_c_end_00  ...  skew_ocv  kurtosis_ocv   sum_ocv  sum_square_ocv  var_v_diff  min_v_diff  mean_v_diff  skew_v_diff  kurtosis_v_diff  sum_v_diff  sum_square_v_diff       D_1       D_2       D_3       D_4       D_5       D_6       D_7       D_8\n0  -0.056034  -0.063766   -0.07963  -0.105001  -0.091609  -0.095464  -0.073553   -0.06692  -0.064657  -0.037199  -0.071951  -0.077876  -0.128588  -0.103652  -0.106871  -0.096638  -0.066802  -0.074038   -0.053153  ...  1.674431      7.472183  0.045535        0.000641    0.000186    -0.00181     0.012954     0.887649         2.940287    14.16811           0.373482 -0.075467 -0.097516 -0.230871 -0.163967 -0.158305 -0.137443  0.070989  0.098653\n\n[1 rows x 76 columns]\n</code></pre>"},{"location":"Command%20Line%20Interface/7%20-%20inspect/#inspect-models","title":"Inspect Models","text":"<p>Example:</p> <pre><code>$: beep inspect model-src.json.gz 2021-09-22 16:06:04 WARNING  Number of samples (4) less than number of features (179); may cause overfitting.\n2021-09-22 16:06:04 INFO     Loaded beep/tests/test_files/modelling_test_files/model-src.json.gz as type &lt;class 'beep.model.BEEPLinearModelExperiment'&gt;.\n\nBEEP Linear Model Experiment: beep/tests/test_files/modelling_test_files/model-src.json.gz\n\nTargets: ['capacity_0.92::TrajectoryFastCharge']\nModel name: lasso\n\nImpute strategy: median\n\nHomogenize features: True\n\nNaN Thresholds:\n        -train_feature_drop_nan_thresh: 0.95\n        -train_sample_drop_nan_thresh: 0.5\n        -predict_sample_nan_thresh: 0.75\n\nModel parameters:\n        - coef_: [0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0]\n- intercept_: 113.25\n        - optimal_hyperparameters: {'alpha': 98.35818271439722}\nMatrices:\n\nfeature_matrix\n                                                    D_1::HPPCResistanceVoltageFeatures::6262aa8b2c9ce9530d53f73943e5b465a1946f39be2ad2a3ede05f49e6f9f2d2  ...  var_v_diff::HPPCResistanceVoltageFeatures::6262aa8b2c9ce9530d53f73943e5b465a1946f39be2ad2a3ede05f49e6f9f2d2\nfilename                                                                                                                                                  ...                                                                                                             beep/CLI_TEST_...                                          -0.075467                                                     ...                                           0.000186                                                          beep/CLI_TEST_...                                          -0.090097                                                     ...                                           0.002462                                                          beep/CLI_TEST_...                                          -0.145030                                                     ...                                           0.002416                                                          beep/CLI_TEST_...                                          -0.052108                                                     ...                                           0.000848                                                          [4 rows x 179 columns]\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 4 entries, beep/CLI_TEST_FILES_FEATURIZATION/PreDiag_000440_0000FB_structure.json to beep/CLI_TEST_FILES_FEATURIZATION/PredictionDiagnostics_000136_00002D_structure.json\nColumns: 179 entries, D_1::HPPCResistanceVoltageFeatures::6262aa8b2c9ce9530d53f73943e5b465a1946f39be2ad2a3ede05f49e6f9f2d2 to var_v_diff::HPPCResistanceVoltageFeatures::6262aa8b2c9ce9530d53f73943e5b465a1946f39be2ad2a3ede05f49e6f9f2d2\ndtypes: float64(179)\nmemory usage: 5.6+ KB\nNone\n\ntarget_matrix\n                                                    capacity_0.83::TrajectoryFastCharge::319cec55cc030c1911b2530cae3fc2df8d3c24912ae01ee4172ea4ca4caddec8  ...  rpt_1Cdischarge_energy0.8_real_regular_throughput::DiagnosticProperties::9fb32356773f0c4f8c27fc9528ca4a986dc928fbadbd859b67a8892e7daac72e\nfilename                                                                                                                                                   ...                                                                                                                                           beep/CLI_TEST_...                                                284                                                      ...                                                NaN                                                                                        beep/CLI_TEST_...                                                 58                                                      ...                                        1266.108637                                                                                        beep/CLI_TEST_...                                                 85                                                      ...                                                NaN                                                                                        beep/CLI_TEST_...                                                101                                                      ...                                                NaN                                                                                        [4 rows x 11 columns]\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 4 entries, beep/CLI_TEST_FILES_FEATURIZATION/PreDiag_000440_0000FB_structure.json to beep/CLI_TEST_FILES_FEATURIZATION/PredictionDiagnostics_000136_00002D_structure.json\nData columns (total 11 columns):\n #   Column                                                                                                                                           Non-Null Count  Dtype  \n---  ------                                                                                                                                           --------------  -----  0   capacity_0.83::TrajectoryFastCharge::319cec55cc030c1911b2530cae3fc2df8d3c24912ae01ee4172ea4ca4caddec8                                            4 non-null      int64  1   capacity_0.86::TrajectoryFastCharge::319cec55cc030c1911b2530cae3fc2df8d3c24912ae01ee4172ea4ca4caddec8                                            4 non-null      int64  2   capacity_0.89::TrajectoryFastCharge::319cec55cc030c1911b2530cae3fc2df8d3c24912ae01ee4172ea4ca4caddec8                                            4 non-null      int64  3   capacity_0.8::TrajectoryFastCharge::319cec55cc030c1911b2530cae3fc2df8d3c24912ae01ee4172ea4ca4caddec8                                             4 non-null      int64  4   capacity_0.92::TrajectoryFastCharge::319cec55cc030c1911b2530cae3fc2df8d3c24912ae01ee4172ea4ca4caddec8                                            4 non-null      int64  5   capacity_0.95::TrajectoryFastCharge::319cec55cc030c1911b2530cae3fc2df8d3c24912ae01ee4172ea4ca4caddec8                                            4 non-null      int64  6   capacity_0.98::TrajectoryFastCharge::319cec55cc030c1911b2530cae3fc2df8d3c24912ae01ee4172ea4ca4caddec8                                            4 non-null      int64  7   initial_regular_throughput::DiagnosticProperties::9fb32356773f0c4f8c27fc9528ca4a986dc928fbadbd859b67a8892e7daac72e                               1 non-null      float64\n 8   rpt_1Cdischarge_energy0.8_cycle_index::DiagnosticProperties::9fb32356773f0c4f8c27fc9528ca4a986dc928fbadbd859b67a8892e7daac72e                    1 non-null      float64\n 9   rpt_1Cdischarge_energy0.8_normalized_regular_throughput::DiagnosticProperties::9fb32356773f0c4f8c27fc9528ca4a986dc928fbadbd859b67a8892e7daac72e  1 non-null      float64\n 10  rpt_1Cdischarge_energy0.8_real_regular_throughput::DiagnosticProperties::9fb32356773f0c4f8c27fc9528ca4a986dc928fbadbd859b67a8892e7daac72e        1 non-null      float64\ndtypes: float64(4), int64(7)\nmemory usage: 556.0+ bytes\n</code></pre>"},{"location":"Python%20tutorials/1%20-%20quickstart/","title":"1: Quickstart","text":"<p>This notebook is meant to demonstrate basic usage of the beep package with data from \"Data-driven prediction of battery cycle life before capacity degradation\" KA Severson, et al. Nature Energy 4 (5), 383-391</p> <p>This data is available for download from https://data.matr.io/1/ . For brevity, only one test is included in this notebook but the example can easily be extended to a larger number of files.</p>"},{"location":"Python%20tutorials/1%20-%20quickstart/#step-0-install-beep-and-set-environment","title":"Step 0: Install beep and set environment","text":"<p>If you have not already installed beep, run:</p> <pre><code>pip install beep\n</code></pre>"},{"location":"Python%20tutorials/1%20-%20quickstart/#step-1-download-example-battery-cycler-data","title":"Step 1: Download example battery cycler data","text":"<p>The example data set we are using here comes from a set of A123 LFP cells cycled under fast charge conditions. While this tutorial is configured for downloading a single cell, its also possible to download the entire data set and run all of the processing steps on all of the data.</p> <p>Note that for Arbin files, we recommend having the metadata file in addition to the data file in order to perform the data structuring correctly (though it is not required).</p> <pre><code>import os\nimport requests\nprint('Beginning file download with requests')\nthis_dir = os.path.dirname(os.path.abspath(__file__))\ndata_dir = os.path.join(this_dir, 'Severson-et-al')\ntry:\nos.makedirs(data_dir)\nexcept FileExistsError:\npass\nurl = 'https://data.matr.io/1/api/v1/file/5c86c0bafa2ede00015ddf70/download'\nr = requests.get(url)\nwith open(os.path.join(data_dir, '2017-05-12_6C-50per_3_6C_CH36.csv'), 'wb') as f:\nf.write(r.content)\nurl = 'https://data.matr.io/1/api/v1/file/5c86c0b5fa2ede00015ddf6d/download'\nr = requests.get(url)\nwith open(os.path.join(data_dir, '2017-05-12_6C-50per_3_6C_CH36_Metadata.csv'), 'wb') as f:\nf.write(r.content)\n# Retrieve HTTP meta-data\nprint(\"Status code\", r.status_code)\nprint(\"File type recieved\", r.headers['content-type'])\nprint(\"File encoding\", r.encoding)\n</code></pre> <pre><code># output\nBeginning file download with requests\nStatus code 200\nFile type recieved text/csv\nFile encoding ISO-8859-1\n</code></pre> <p>You should now have two files in your data directory: </p> <pre><code>\u251c\u2500\u2500 Severson-et-al\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 2017-05-12_6C-50per_3_6C_CH36.csv\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 2017-05-12_6C-50per_3_6C_CH36_Metadata.csv\n</code></pre>"},{"location":"Python%20tutorials/1%20-%20quickstart/#step-2-structure-and-analyze-data","title":"Step 2: Structure and analyze data","text":"<p>Now that we have our data, we can start using BEEP!</p> <p>To structure a file in <code>beep</code> using python, we use the <code>auto_load</code> function to get a <code>BEEPDatapath</code> object; <code>BEEPDatapath</code> holds everything we need to identify cycler type, load, validate, interpolate, standardize, and analyze our file. </p> <pre><code>import os\nfrom beep.structure.cli import auto_load\nthis_dir = os.path.dirname(os.path.abspath(__file__))\ncycler_file = os.path.join(this_dir, \"Severson-et-al/2017-05-12_6C-50per_3_6C_CH36.csv\")\ndatapath = auto_load(cycler_file)\n</code></pre> <p>We can check our file is valid with <code>validate</code>:</p> <pre><code>is_valid, msg = datapath.validate()\nprint(\"File is valid: \", is_valid)\n</code></pre> <pre><code># Output\nFile is valid: True\n</code></pre> <p>We can easily interpolate and prepare our file for analysis (known as \"structuring\") with the <code>structure</code> method:</p> <pre><code>datapath.structure()\n</code></pre> <p>Now that our file has been structured, we can examine some interesting properties, such as the charge capacity vs. the voltage.</p> <pre><code>from matplotlib import pyplot as plt\nreg_charge = datapath.structured_data[datapath.structured_data.step_type == 'charge']\nprint(\"Mean current for cycle 25: \", reg_charge.current[reg_charge.cycle_index == 25].mean())\nprint(\"Number of cycles: \", reg_charge.cycle_index.max())\nprint(\"Max charge capacity at cycle 25: \", reg_charge.charge_capacity[reg_charge.cycle_index == 25].max())\nplt.plot(reg_charge.charge_capacity[reg_charge.cycle_index == 600], reg_charge.voltage[reg_charge.cycle_index == 600])\nplt.show()\n</code></pre> <pre><code># output\nMean current for cycle 25: 4.697416\nNumber of cycles: 876\nMax charge capacity at cycle 25: 1.1737735\n</code></pre> <p></p> <p>We can also view some interesting data about the energy efficiency as the cycles progress:</p> <pre><code>plt.plot(datapath.structured_summary.cycle_index, datapath.structured_summary.energy_efficiency)\nplt.show()\n</code></pre> <p></p> <p>More info on <code>BEEPDatapath</code></p>"},{"location":"Python%20tutorials/1%20-%20quickstart/#step-3-prepare-for-machine-learning-and-train-a-model","title":"Step 3: Prepare for machine learning and train a model","text":"<p>Featurization uses the structured objects to calculate statistically and physically relevant quantities for the purpose of building predictive machine learning models. The objects can be selected and joined for the purposes of training the model, or used for predicting individual outcomes.</p> <p><code>beep</code> provides classes such as <code>BEEPFeaturizer</code> and <code>BEEPFeatureMatrix</code> for generating and managing sets of features linked to structured files.</p> <p><code>beep</code> also provides <code>BEEPLinearModelExperiment</code>, a class for training linear machine learning models on battery data and predicting new degradation characteristics.</p> <p>Quickstart sections on featurization and machine learning are coming soon!</p>"},{"location":"Python%20tutorials/1%20-%20quickstart/#congrats","title":"Congrats!","text":"<p>You've made it to the end of the tutorial. </p>"},{"location":"Python%20tutorials/2%20-%20structuring/","title":"2: Structuring","text":"<p>Here you'll find more info about creating and using beep to do your own custom cycler analyses.</p> <ul> <li><code>BEEPDatapath</code> - One object for ingestion, structuring, and validation</li> <li>Batch functions for structuring</li> <li>Featurization</li> <li>Running and analyzing models</li> </ul>"},{"location":"Python%20tutorials/2%20-%20structuring/#structuring-with-beepdatapath","title":"Structuring with <code>BEEPDatapath</code>","text":""},{"location":"Python%20tutorials/2%20-%20structuring/#one-class-for-ingestion-structuring-and-validation","title":"One class for ingestion, structuring, and validation","text":"<p><code>BEEPDatapath</code> is an abstract base class that can handle ingestion, structuring, and validation for many types of cyclers. A datapath object represents a complete processing pipeline for battery cycler data.</p> <p>Each cycler has it's own <code>BEEPDatapath</code> class:</p> <ul> <li><code>ArbinDatapath</code></li> <li><code>MaccorDatapath</code></li> <li><code>NewareDatapath</code></li> <li><code>IndigoDatapath</code></li> <li><code>BiologicDatapath</code></li> </ul> <p>All these datapaths implement the same core methods, properties, and attributes, listed below:</p>"},{"location":"Python%20tutorials/2%20-%20structuring/#methods-for-loading-and-serializing-battery-cycler-data","title":"Methods for loading and serializing battery cycler data","text":""},{"location":"Python%20tutorials/2%20-%20structuring/#datapathfrom_filefilename","title":"<code>*Datapath.from_file(filename)</code>","text":"<p>Classmethod to load a raw cycler output file (e.g., a csv) into a datapath object. Once loaded, you can validate or structure the file.</p> <pre><code># Here we use ArbinDatapath as an example\nfrom beep.structure import ArbinDatapath\ndatapath = ArbinDatapath.from_file(\"my_arbin_file.csv\")\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathto_json_filefilename","title":"<code>*Datapath.to_json_file(filename)</code>","text":"<p>Dump the current state of a datapath to a file. Can be later loaded with <code>from_json_file</code>.</p> <pre><code>from beep.structure import NewareDatapath\ndatapath = NewareDatapath.from_file(\"/path/to/my_raw_neware_file\")\n# do some operations\n...\n# Write the processed file to disk, which can then be loaded.\ndatapath.to_json_file(\"my_processed_neware_data.json\")\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathfrom_json_filefilename","title":"<code>*Datapath.from_json_file(filename)</code>","text":"<p>Classmethod to load a processed cycler file (e.g., a previously structured Datapath) into a datapath object.  </p> <pre><code>from beep.structure import MaccorDatapath\ndatapath = MaccorDatapath.from_json_file(\"my_previously_serialized_datapath.json\")\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathdata-metadata-pathsnone-kwargs","title":"<code>*Datapath(data, metadata, paths=None, **kwargs)</code>","text":"<p>Initialize any cycler from the raw data (given as a pandas dataframe) and metadata (given as a dictionary). Paths can be included to keep track of where various cycler files are located. Note: This is not the recommended way to create a <code>BEEPDatapath</code>, as <code>data</code> and <code>metadata</code> must have specific formats to load and structure correctly.</p>"},{"location":"Python%20tutorials/2%20-%20structuring/#validation-and-structuring-with-beepdatapaths","title":"Validation and structuring with <code>BEEPDatapath</code>s","text":""},{"location":"Python%20tutorials/2%20-%20structuring/#datapathvalidate","title":"<code>*Datapath.validate()</code>","text":"<p>Validate your raw data. Will return true if the raw data is valid for your cycler (i.e., can be structured successfully).</p> <pre><code>from beep.structure import IndigoDatapath\ndatapath = IndigoDatapath.from_file(\"/path/to/my_indigo_file\")\nis_valid = datapath.validate()\nprint(is_valid)\n# Out:\n# True or False\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathstructureargs","title":"<code>*Datapath.structure(*args)</code>","text":"<p>Interpolate and structure your data using specified arguments. Once structured, your <code>BEEPDatapath</code> is able to access things like the diagnostic summary, interpolated cycles, cycle summary, diagnostic summary, cycle life, and more (see Analysis and attributes of core attributes of <code>BEEPDatapath</code>)</p> <pre><code>from beep.structure import ArbinDatapath\ndatapath = ArbinDatapath.from_file(\"my_arbin_file.csv\")\n# Structure your data by manually specifying parameters.\ndatapath.structure(v_range=[1.2, 3.5], nominal_capacity=1.2, full_fast_charge=0.85)\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathautostructure","title":"<code>*Datapath.autostructure()</code>","text":"<p>Run structuring using automatically determined parameters. BEEP can automatically detect the structuring parameters based on your raw data.</p> <p>Note: The BEEP environment variable <code>BEEP_PROCESSING_DIR</code> must be set before autostructuring, and this directory must contain a parameters file which can be used for <code>determine_structuring_parameters</code>.</p> <pre><code>from beep.structure import BiologicDatapath\ndatapath = BiologicDatapath.from_file(\"path/to/my/biologic_data_file\")\n# Automatically determines structuring parameters and structures data\ndatapath.autostructure()\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#analysis-and-core-attributes-of-beepdatapath","title":"Analysis and core attributes of <code>BEEPDatapath</code>","text":""},{"location":"Python%20tutorials/2%20-%20structuring/#datapathpaths","title":"<code>*Datapath.paths</code>","text":"<p>Access all paths of files related to this datapath. <code>paths</code> is a simple mapping of <code>{file_description: file_path}</code> which holds the paths of all files related to this datapath, including raw data, metadata, EIS files, and structured outputs.</p> <pre><code>from beep.structure import ArbinDatapath\ndatapath = ArbinDatapath.from_file(\"/path/to/my_arbin_file.csv\")\nprint(datapath.paths)\n# Out:\n{\"raw\": \"/path/to/my_arbin_file.csv\", \"metadata\": \"/path/to/my_arbin_file_Metadata.csv\"}\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathstructuring_parameters","title":"<code>*Datapath.structuring_parameters</code>","text":"<p>Parameters used to structure <code>BEEPDatapaths</code>:</p> <pre><code>from beep.structure import ArbinDatapath\ndatapath = ArbinDatapath.from_file(\"/path/to/my_arbin_file.csv\")\ndatapath.autostructure()\nprint(datapath.structuring_parameters)\n# Out:\n{'v_range': None,\n'resolution': 1000,\n'diagnostic_resolution': 500,\n'nominal_capacity': 1.1,\n'full_fast_charge': 0.8,\n'diagnostic_available': False,\n'charge_axis': 'charge_capacity',\n'discharge_axis': 'voltage'}\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathraw_data","title":"<code>*Datapath.raw_data</code>","text":"<p>The raw data, loaded into a standardized dataframe format, of this datapath's battery cycler data.</p> <pre><code>from beep.structure import ArbinDatapath\ndatapath = ArbinDatapath.from_file(\"/path/to/my_arbin_file.csv\")\nprint(datapath.raw_data)\n# Out:\ndata_point   test_time  ...  temperature              date_time_iso\n0                0      0.0021  ...    20.750711  2017-12-05T03:37:36+00:00\n1                1      1.0014  ...    20.750711  2017-12-05T03:37:36+00:00\n2                2      1.1165  ...    20.750711  2017-12-05T03:37:36+00:00\n3                3      2.1174  ...    20.750711  2017-12-05T03:37:36+00:00\n4                4     12.1782  ...    20.750711  2017-12-05T03:37:36+00:00\n...            ...         ...  ...          ...                        ...\n251258      251258  30545.2000  ...    32.595604  2017-12-14T00:10:40+00:00\n251259      251259  30545.2000  ...    32.555054  2017-12-14T00:10:40+00:00\n251260      251260  30550.1970  ...    32.555054  2017-12-14T00:12:48+00:00\n251261      251261  30550.1970  ...    32.545870  2017-12-14T00:12:48+00:00\n251262      251262  30555.1970  ...    32.445827  2017-12-14T00:12:48+00:00\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathmetadata","title":"<code>*Datapath.metadata</code>","text":"<p>An object holding all metadata for this datapath's cycler run.</p> <pre><code>from beep.structure import ArbinDatapath\ndatapath = ArbinDatapath.from_file(\"/path/to/my_arbin_file.csv\")\nprint(datapath.metadata.barcode)\nprint(datapath.metadata.channel_id)\nprint(datapath.metadata.protocol)\nprint(datapath.metadata.raw)\n# Out:\n\"EL151000429559\"\n28\n'2017-12-04_tests\\\\20170630-4_65C_69per_6C.sdu'\n{'test_id': 296, 'device_id': 60369369, 'channel_id': 28, 'start_datetime': 1512445026, '_resumed_times': 0, 'last_resume_datetime': 0, '_last_end_datetime': 1512514129, 'protocol': '2017-12-04_tests\\\\20170630-4_65C_69per_6C.sdu', '_databases': 'ArbinResult_43,ArbinResult_44,ArbinResult_45,', 'barcode': 'EL151000429559', '_grade_id': 0, '_has_aux': 3, '_has_special': 0, '_schedule_version': 'Schedule Version 7.00.08', '_log_aux_data_flag': 1, '_log_special_data_flag': 0, '_rowstate': 0, '_canconfig_filename': nan, '_m_ncanconfigmd5': nan, '_value': 0.0, '_value2': 0.0}\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathstructured_data","title":"<code>*Datapath.structured_data</code>","text":"<p>The structured (interpolated) data, as a dataframe. The format is similar to that of <code>.raw_data</code>. The datapath must be structured before this attribute is available.</p> <pre><code>from beep.structure import ArbinDatapath\ndatapath = ArbinDatapath.from_file(\"/path/to/my_arbin_file.csv\")\ndatapath.autostructure()\nprint(datapath.structured_data)\n# Out:\nvoltage  test_time  current  ...  temperature  cycle_index  step_type\n0       2.500000        NaN      NaN  ...          NaN            0  discharge\n1       2.501702        NaN      NaN  ...          NaN            0  discharge\n2       2.503403        NaN      NaN  ...          NaN            0  discharge\n3       2.505105        NaN      NaN  ...          NaN            0  discharge\n4       2.506807        NaN      NaN  ...          NaN            0  discharge\n...        ...      ...  ...          ...          ...        ...\n461995       NaN        NaN      NaN  ...          NaN          245     charge\n461996       NaN        NaN      NaN  ...          NaN          245     charge\n461997       NaN        NaN      NaN  ...          NaN          245     charge\n461998       NaN        NaN      NaN  ...          NaN          245     charge\n461999       NaN        NaN      NaN  ...          NaN          245     charge\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathstructured_summary","title":"<code>*Datapath.structured_summary</code>","text":"<p>A summary of the structured cycler data, as a dataframe. The datapath must be structured before this attribute is available.</p> <pre><code>from beep.structure import MaccorDatapath\ndatapath = MaccorDatapath.from_file(\"/path/to/my_maccor_file.071\")\ndatapath.autostructure()\nprint(datapath.structured_summary)\n# Out:\ncycle_index  discharge_capacity  charge_capacity  discharge_energy  charge_energy  dc_internal_resistance  temperature_maximum  temperature_average  temperature_minimum              date_time_iso  energy_efficiency  charge_throughput  energy_throughput  charge_duration  time_temperature_integrated  paused\ncycle_index                                                                                                                                                                                                                                                                                                                    \n0                      0            4.719281         3.827053         17.273731      14.901985                     0.0                  NaN                  NaN                  NaN  2019-12-17T17:51:51+00:00           1.159156           3.827053          14.901985              NaN                          NaN    4957\n6                      6            2.074518         4.406801          7.677041      16.997186                     0.0                  NaN                  NaN                  NaN  2019-12-20T13:14:40+00:00           0.451665           8.233854          31.899172           5791.0                          NaN       0\n7                      7            2.097911         2.108322          7.775166       8.597635                     0.0                  NaN                  NaN                  NaN  2019-12-20T15:51:34+00:00           0.904338          10.342176          40.496807              NaN                          NaN       0\n8                      8            2.074545         2.098428          7.684986       8.557546                     0.0                  NaN                  NaN                  NaN  2019-12-20T17:32:21+00:00           0.898036          12.440605          49.054352              NaN                          NaN       0\n9                      9            2.074061         2.082069          7.685348       8.494265                     0.0                  NaN                  NaN                  NaN  2019-12-20T19:12:46+00:00           0.904769          14.522674          57.548618              NaN                          NaN       0\n10                    10            2.065671         2.069061          7.655246       8.441246                     0.0                  NaN                  NaN                  NaN  2019-12-20T20:52:53+00:00           0.906886          16.591734          65.989861              NaN                          NaN       0\n11                    11            2.064542         2.068921          7.651949       8.439011                     0.0                  NaN                  NaN                  NaN  2019-12-20T22:32:38+00:00           0.906735          18.660656          74.428871              NaN                          NaN       0\n12                    12            2.068333         2.061454          7.666199       8.409441                     0.0                  NaN                  NaN                  NaN  2019-12-21T00:12:35+00:00           0.911618          20.722109          82.838318              NaN                          NaN       0\n13                    13            2.054566         2.067370          7.616584       8.431127                     0.0                  NaN                  NaN                  NaN  2019-12-21T01:52:14+00:00           0.903389          22.789478          91.269440              NaN                          NaN       0\n14                    14            2.061369         2.057715          7.647454       8.394535                     0.0                  NaN                  NaN                  NaN  2019-12-21T03:31:54+00:00           0.911004          24.847195          99.663979              NaN                          NaN       0\n15                    15            2.050721         2.059819          7.602874       8.401562                     0.0                  NaN                  NaN                  NaN  2019-12-21T05:11:24+00:00           0.904936          26.907013         108.065536              NaN                          NaN       0\n16                    16            2.055427         2.057405          7.622452       8.393292                     0.0                  NaN                  NaN                  NaN  2019-12-21T06:50:57+00:00           0.908160          28.964418         116.458832              NaN                          NaN       0\n17                    17            2.045344         2.049606          7.583858       8.360918                     0.0                  NaN                  NaN                  NaN  2019-12-21T08:30:36+00:00           0.907060          31.014025         124.819748              NaN                          NaN       0\n18                    18            2.047280         2.046608          7.591624       8.347446                     0.0                  NaN                  NaN                  NaN  2019-12-21T10:09:56+00:00           0.909455          33.060631         133.167191              NaN                          NaN       0\n19                    19            2.055454         2.046478          7.623849       8.347916                     0.0                  NaN                  NaN                  NaN  2019-12-21T11:49:18+00:00           0.913264          35.107109         141.515106              NaN                          NaN       0\n20                    20            2.043676         2.055780          7.579766       8.383341                     0.0                  NaN                  NaN                  NaN  2019-12-21T13:28:39+00:00           0.904146          37.162891         149.898453              NaN                          NaN       0\n21                    21            2.049323         2.046085          7.605977       8.346517                     0.0                  NaN                  NaN                  NaN  2019-12-21T15:08:10+00:00           0.911276          39.208977         158.244965              NaN                          NaN       0\n22                    22            2.038514         2.047097          7.560916       8.349430                     0.0                  NaN                  NaN                  NaN  2019-12-21T16:47:22+00:00           0.905561          41.256073         166.594406              NaN                          NaN       0\n23                    23            2.044779         2.045038          7.585164       8.342201                     0.0                  NaN                  NaN                  NaN  2019-12-21T18:26:38+00:00           0.909252          43.301109         174.936600              NaN                          NaN       0\n24                    24            2.039805         2.039563          7.567169       8.319416                     0.0                  NaN                  NaN                  NaN  2019-12-21T20:06:10+00:00           0.909579          45.340672         183.256012              NaN                          NaN       0\n25                    25            2.039563         2.040318          7.566332       8.320876                     0.0                  NaN                  NaN                  NaN  2019-12-21T21:45:20+00:00           0.909319          47.380993         191.576889              NaN                          NaN       0\n26                    26            2.052362         2.038989          7.616830       8.316606                     0.0                  NaN                  NaN                  NaN  2019-12-21T23:24:33+00:00           0.915858          49.419979         199.893494              NaN                          NaN       0\n27                    27            2.035744         2.051446          7.552814       8.364671                     0.0                  NaN                  NaN                  NaN  2019-12-22T01:03:48+00:00           0.902942          51.471428         208.258163              NaN                          NaN       0\n28                    28            2.039347         2.041048          7.568011       8.325755                     0.0                  NaN                  NaN                  NaN  2019-12-22T02:43:14+00:00           0.908988          53.512474         216.583923              NaN                          NaN       0\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathdiagnostic_data","title":"<code>*Datapath.diagnostic_data</code>","text":"<p>The structured (interpolated) data for diagnostic cycles, as a dataframe. The format is similar to that of <code>.structured_data</code>. The datapath must be structured before this attribute is available.</p> <pre><code>from beep.structure import MaccorDatapath\ndatapath = MaccorDatapath.from_file(\"/path/to/my_maccor_file_with_diagnostic.071\")\ndatapath.autostructure()\nprint(datapath.diagnostic_data)\n# Out:\nvoltage    test_time   current  ...  step_type  discharge_dQdV  charge_dQdV\n0      2.700000          NaN       NaN  ...          0             NaN          NaN\n1      2.703006          NaN       NaN  ...          0             NaN          NaN\n2      2.706012          NaN       NaN  ...          0             NaN          NaN\n3      2.709018          NaN       NaN  ...          0             NaN          NaN\n4      2.712024          NaN       NaN  ...          0             NaN          NaN\n...          ...       ...  ...        ...             ...          ...\n44434  2.782701  1958305.375  1.612107  ...          0             0.0     0.006379\n44435  2.783219  1958305.375  1.612090  ...          0             0.0     0.006379\n44436  2.783736  1958305.375  1.612073  ...          0             0.0     0.006379\n44437  2.784254  1958305.375  1.612056  ...          0             0.0     0.006379\n44438  2.784771  1958305.375  1.612039  ...          0             0.0     0.006379\n[44439 rows x 16 columns]\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathdiagnostic_summary","title":"<code>*Datapath.diagnostic_summary</code>","text":"<p>A summary of the structured diagnostic cycle data, as a dataframe. The datapath must be structured before this attribute is available.</p> <pre><code>from beep.structure import MaccorDatapath\ndatapath = MaccorDatapath.from_file(\"/path/to/my_maccor_file_with_diagnostic.071\")\ndatapath.autostructure()\nprint(datapath.diagnostic_summary)\n# Out:\ncycle_index  discharge_capacity  ...  paused  cycle_type\n0             1            4.711819  ...       0       reset\n1             2            4.807243  ...       0        hppc\n2             3            4.648884  ...       0    rpt_0.2C\n3             4            4.525516  ...       0      rpt_1C\n4             5            4.482939  ...       0      rpt_2C\n5            36            4.624467  ...       0       reset\n6            37            4.722887  ...       0        hppc\n7            38            4.584861  ...       0    rpt_0.2C\n8            39            4.476485  ...       0      rpt_1C\n9            40            4.426849  ...       0      rpt_2C\n10          141            4.529535  ...       0       reset\n11          142            4.621750  ...       0        hppc\n12          143            4.486644  ...       0    rpt_0.2C\n13          144            4.391235  ...       0      rpt_1C\n14          145            4.336987  ...       0      rpt_2C\n15          246            4.459362  ...       0       reset\n16          247            4.459362  ...       0        hppc\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathget_cycle_lifen_cycles-threshold","title":"<code>*Datapath.get_cycle_life(n_cycles, threshold)</code>","text":"<p>Calculate the cycle life for capacity loss below a certain threshold.</p> <pre><code>from beep.structure import MaccorDatapath\ndatapath = MaccorDatapath.from_file(\"/path/to/my_maccor_file.071\")\ndatapath.autostructure()\nprint(datapath.get_cycle_life())\n# Out:\n231\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathcycles_to_capacitiescycle_min-cycle_max-cycle_interval","title":"<code>*Datapath.cycles_to_capacities(cycle_min, cycle_max, cycle_interval)</code>","text":"<p>Get the capacities for an array of cycles in an interval.</p> <pre><code>from beep.structure import MaccorDatapath\ndatapath = MaccorDatapath.from_file(\"/path/to/my_maccor_file.071\")\ndatapath.autostructure()\nprint(datapath.cycles_to_capacities(cycle_min=50, cycle_max=200, cycle_interval=50))\n# Out:\ncycle_50  cycle_100  cycle_150\n0  2.020498   1.981053   1.965753\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathcapacities_to_cyclesthresh_max_cap-thresh_min_cap-interval_cap","title":"<code>*Datapath.capacities_to_cycles(thresh_max_cap, thresh_min_cap, interval_cap)</code>","text":"<p>Get the number of cycles to reach an array of threshold capacities in an interval.</p> <pre><code>from beep.structure import MaccorDatapath\ndatapath = MaccorDatapath.from_file(\"/path/to/my_maccor_file.071\")\ndatapath.autostructure()\nprint(datapath.capacities_to_cycles())\n# Out:\ncapacity_0.98  capacity_0.95  capacity_0.92  capacity_0.89  capacity_0.86  capacity_0.83  capacity_0.8\n0             76            185            231            231            231            231           231\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#datapathis_structured","title":"<code>*Datapath.is_structured</code>","text":"<p>Tells whether the datapath has been structured or not.</p> <pre><code>from beep.structure import MaccorDatapath\ndatapath = MaccorDatapath.from_file(\"/path/to/my_maccor_file.071\")\nprint(datapath.is_structured)\n# Out:\nFalse\ndatapath.structure()\nprint(datapath.is_structured)\n# Out:\nTrue\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#making-your-own-beepdatapath","title":"Making your own <code>BEEPDatapath</code>","text":"<p>If your cycler is not already supported by BEEP, you can write a class for structuring its data with BEEP by inheriting <code>BEEPDatapath</code> and implementing one method: <code>from_file</code>.</p> <pre><code>from beep.structure import BEEPDatapath\nclass MyCustomCyclerDatapath(BEEPDatapath):\n\"\"\"An example of implementing a custom BEEPDatapath for your own cycler.\n    \"\"\"\n@classmethod\ndef from_file(cls, filename):\n# Load your file from the raw file filename\ndata = pd.read_csv(filename)\n# Parse the raw data\n# The raw data must adhere to BEEP standards. See the beep/conversion_schemas for the list of canonical data columns the raw data dataframe must posess.\n# Your own code for converting the raw data to contain BEEP columns\ndata = convert_my_custom_cycler_data_to_BEEP_dataframe(data)\n# Parse the metadata using your own code\n# Metadata must return a dictionary\n# Should preferably contain \"barcode\", \"protocol\", and \"channel_id\" keys at a minimum.\nmetadata_filename = filename + \"_metadata\"\nmetadata = my_metadata_parsing_function(metadata_filename)\n# Store the paths in a dictionary\npaths = {\n\"raw\": filename,\n\"metadata\": filename + \"_Metadata\"\n}\nreturn cls(data, metadata, paths)\n</code></pre> <p>Your custom datapath class can create new methods or override existing <code>BEEPDatapath</code> methods if needed.</p> <p>Once you have written your custom class's <code>from_file</code> method, all the existing behavior of <code>BEEPDatapath</code> should be available, including </p> <ul> <li><code>structure()</code></li> <li><code>validate()</code></li> <li><code>autostructure()</code></li> <li><code>paths</code></li> <li><code>raw_data</code></li> <li><code>structured_summary</code></li> <li><code>structured_data</code></li> <li><code>diagnostic_data</code></li> <li>etc.</li> </ul>"},{"location":"Python%20tutorials/2%20-%20structuring/#electrochemical-impedance-spectra","title":"Electrochemical Impedance Spectra","text":"<p>More documentation for EIS coming soon!</p>"},{"location":"Python%20tutorials/2%20-%20structuring/#structuring-compatibility-with-processed-legacy-beep-files","title":"Structuring compatibility with processed legacy BEEP files","text":"<p>Both legacy and <code>*Datapath</code> processed (structured) files saved as json should load with <code>*Datapath.from_json_file</code>, but the capabilities between files serialized with legacy and files serialized with newer <code>BEEPDatapath</code> files will differ.  The main discrepancy is that legacy files cannot be restructured once loaded. All of <code>BEEPDatapath</code>'s other structured attributes and properties should function for legacy files identically to those serialized with newer <code>BEEPDatapath</code>.</p> <p>See the <code>auto_load_processed</code> documentation for more info on loading legacy processed <code>BEEPDatapath</code>s. </p>"},{"location":"Python%20tutorials/2%20-%20structuring/#top-level-functions-for-structuring","title":"Top-level functions for structuring","text":"<p>Aside from the CLI (shown in the command line interface guide, BEEP also contains lower-level python functions for helping loading and structuring many cycler output files from different cyclers.</p>"},{"location":"Python%20tutorials/2%20-%20structuring/#auto_load","title":"<code>auto_load</code>","text":"<p>Auto load will look at the file signature of a raw cycler run output file and automatically load the correct datapath (provided the cycler is supported by BEEP).</p> <pre><code>from beep.structure import auto_load\narbin_datapath = auto_load(\"/path/to/my_arbin_file.csv\")\nprint(arbin_datapath)\n# Out:\n&lt;ArbinDatapath object&gt;\nmaccor_datapath = auto_load(\"/path/to/my_maccor_file\")\nprint(maccor_datapath)\n# Out:\n&lt;MaccorDatapath object&gt;\n</code></pre>"},{"location":"Python%20tutorials/2%20-%20structuring/#auto_load_processed","title":"<code>auto_load_processed</code>","text":"<p>Automatically loads the correct datapath for any previously serialized processed (structured) BEEP file.</p> <p>While processed run .json files serialized with <code>*Datapath</code> classes can be loaded with <code>monty.serialization.loadfn</code>, processed files serialized with older BEEP versions may not work with <code>loadfn</code>. <code>auto_load_processed</code> will automatically load the correct datapath, even for legacy BEEP processed .json files, though the functionality of these datapaths is restricted. For example, legacy datapaths cannot be restructured.</p> <pre><code>from beep.structure import auto_load_processed\narbin_datapath_processed = auto_load_processed(\"/path/to/my_processed_arbin_file.json\")\nprint(arbin_datapath_processed)\n# Out:\n&lt;ArbinDatapath object&gt;\nprocessed_datapath_legacy = auto_load_processed(\"/path/to/my_legacy_neware_file\")\nprint(processed_datapath_legacy)\n# Out:\n&lt;NewareDatapath object&gt;\n</code></pre>"},{"location":"Python%20tutorials/3%20-%20featurization/","title":"3: Featurization","text":"<p>More documentation for featurization coming soon!</p>"},{"location":"Python%20tutorials/4%20-%20models/","title":"4: Machine Learning","text":"<p>More documentation for running models coming soon!</p>"},{"location":"Python%20tutorials/advanced_structuring/","title":"Advanced Structuring: Unsupported cyclers","text":"<p>If you are using a cycler not supported by BEEP, you can still use BEEP to structure, featurize, and run models on your data!  To do this, you simply inherit from the <code>BEEPDatapath</code> base class described in the Structuring Tutorial to create your own Datapath.</p> <p><code>BEEPDatapath</code> handles all structuring of battery cycler files by taking them from raw cycler output files (usually csvs or text) and converting them into consistent interfaces for structuring.</p> <p>Your custom datapath will work with BEEP's capabilities similarly to all existing cyclers/datapaths. </p>"},{"location":"Python%20tutorials/advanced_structuring/#the-simplest-case-using-from_file","title":"The Simplest Case: Using <code>from_file</code>","text":"<p>To put your cycler data in a format BEEP can understand, inherit from the <code>BEEPDatapath</code> class and implement the <code>from_file</code> classmethod.</p>"},{"location":"Python%20tutorials/advanced_structuring/#requirements","title":"Requirements","text":"<p>Your from file method will need to produce the following data to work correctly with BEEP.</p>"},{"location":"Python%20tutorials/advanced_structuring/#1-a-dataframe-of-the-battery-cycler-data-in-a-standard-format","title":"1. A dataframe of the battery cycler data, in a standard format","text":"<p>The dataframe should have at least the following columns, named exactly as described:</p> <ul> <li><code>test_time</code>: Time of the test, in seconds</li> <li><code>cycle_index</code>: Integer index of the cycle number</li> <li><code>current</code>: Current drawn to/from battery, in amps</li> <li><code>voltage</code>: Voltage, in volts</li> <li><code>charge_capacity</code>: Charge capacity of the battery, in amp-hours</li> <li><code>discharge_capacity</code>: Discharge capacity of the battery, in amp-hours</li> <li><code>charge_energy</code>: Charge energy of the battery, in watt-hours</li> <li><code>discharge_energy</code>: Discharge energy of the battery, in watt-hours</li> <li><code>step_index</code>: Index integer of the charge-step, e.g., resting = 1, charging = 2, etc.</li> <li><code>step_time</code>: amount of time spent in this charge-step, in seconds.</li> </ul> <p>(Optional):</p> <ul> <li><code>temperature</code>: Temperature of the cell itself</li> <li><code>date_time</code>: Date time, as timestamp (ms from unix epoch)</li> <li><code>date_time_iso</code>: Date time in UTC time zone, formatted using <code>.isoformat()</code></li> <li><code>internal_resistance</code>: Internal resistance of battery, in ohm</li> </ul> <p>The dataframe may contain other data, if available from your cycler output.</p>"},{"location":"Python%20tutorials/advanced_structuring/#2-metadata-dictionary","title":"2. Metadata dictionary","text":"<p>All available metadata from the cycler run should be gathered by <code>from_file</code>. This can include things like:</p> <ul> <li><code>barcode</code></li> <li><code>protocol</code></li> <li><code>channel_id</code></li> <li>and other cycler-specific metadata.</li> </ul> <p>The metadata should be a dictionary.</p>"},{"location":"Python%20tutorials/advanced_structuring/#3-paths-to-raw-input-files","title":"3. Paths to raw input files","text":"<p>Finally, paths to all raw input files should be collected as a dictionary, mapping file type to the absolute path. For example, if each run of your cycler requires a time series file and a metadata file, the paths dictionary would look like:</p> <pre><code>paths = {\n\"raw\": \"/path/to/raw/timeseries.csv\",\n\"metadata\": \"/path/to/metadata.json\"\n}\n</code></pre> <p>Note <code>raw</code> and <code>metadata</code> are special keys. While having these two exact paths is recommended, arbitrary other paths to supporting files can be passed in the paths dictionary without any special naming convention. For example:</p> <pre><code>paths = {\n\"raw\": \"/path/to/raw/timeseries.csv\",\n\"metadata\": None,\n\"my_other_required_filetype_path\": \"/path/to/somefile.hd5\"\n}\n</code></pre>"},{"location":"Python%20tutorials/advanced_structuring/#column-mapping","title":"Column Mapping","text":"<p>To transparently keep consistent data types and column names, we recommend making the following class attributes in your <code>BEEPDatapath</code> child class:</p> <ul> <li><code>COLUMN_MAPPING</code>: Maps raw column names to BEEP canonical names</li> <li><code>COLUMNS_IGNORE</code>: Raw column names to ignore, if they are not needed (for example, <code>Environmental Temperature (C)</code>) </li> <li><code>DATA_TYPES</code>: Mapping of BEEP canoncial column name to data type, in pandas-parsable format. For example, if your cycle index should be 32-pt integer, you can include the key-value <code>\"cycle_index\": \"int32\"</code> in your <code>DATA_TYPES</code> class attribute.</li> </ul>"},{"location":"Python%20tutorials/advanced_structuring/#code-example-putting-it-all-together","title":"Code Example - putting it all together","text":"<p>Once your <code>from_file</code> method is able to extract the three requirements in the correct format, you should be able to pass those objects to the <code>cls</code> constructor inside of <code>from_file</code>. For example:</p> <pre><code>import os\nimport json\nimport pytz\nimport pandas as pd\nfrom beep.structure.base import BEEPDatapath\nclass MyCyclerDatapath(BEEPDatapath):\nCOLUMN_MAPPING = {\n\"test_time (s)\": \"test_time\",\n\"cycle_index\": \"cycle_index\",\n\"current (a)\": \"current\",\n\"voltage (v)\": \"voltage\",\n\"charge_capacity (ah)\": \"charge_capacity\",\n\"discharge_capacity (ah)\": \"discharge_capacity\",\n\"charge_energy (wh)\": \"charge_energy\",\n\"discharge_energy (wh)\": \"discharge_energy\",\n\"cell_temperature (c)\": \"temperature\",\n\"date_time\": \"date_time\",\n\"steptime\": \"step_time\",\n\"stepix\": \"step_index\"\n}\n# Columns to ignore\nCOLUMNS_IGNORE = [\"environment_temperature (c)\"]\n# Mapping of data types for BEEP columns\nDATA_TYPES = {\n\"test_time\": \"float64\",\n\"cycle_index\": \"int32\",\n\"current\": \"float32\",\n\"voltage\": \"float32\",\n\"charge_capacity\": \"float64\",\n\"discharge_capacity\": \"float64\",\n\"charge_energy\": \"float64\",\n\"discharge_energy\": \"float64\",\n\"temperature\": \"float32\",\n\"date_time\": \"float32\",\n\"step_time\": \"float32\",\n\"step_index\": \"int32\"\n}\n@classmethod\ndef from_file(cls, path, metadata_path=None):\n# some code to get the raw data in BEEP format\n# assuming it does not need to be further augmented\ndf = pd.read_csv(path)\ndf = df.drop(cls.COLUMNS_IGNORE)\ndf.rename(columns=cls.COLUMN_MAPPING, inplace=True)\n# For example, adding a date_time_iso column if not already present\ndf[\"date_time_iso\"] = df[\"date_time\"].apply(\nlambda x: x.from_timestamp().replace(tzinfo=pytz.UTC).isoformat()\n)\n# Cast all data types to those specified as class attrs\nfor column, dtype in cls.DATA_TYPES.items():\nif column in df:\nif not df[column].isnull().values.any():\ndf[column] = df[column].astype(dtype)\n# Read in metadata from a separate json file, for example\nif metadata_path:\nwith open(metadata_path, \"r\") as f:\nmetadata = json.load(f)\nelse:\nmetadata = {}\n# specify all paths absolutely\npaths = {\n\"raw\": os.path.abspath(path),\n\"metadata\": os.path.abspath(metadata_path)\n}\n# Return the 3 required objects to BEEPDatapath\nreturn cls(df, metadata, paths)\n</code></pre>"},{"location":"Python%20tutorials/advanced_structuring/#after-your-beepdatapath-is-working","title":"After your BEEPDatapath is working","text":"<p>Once your BEEPDatapath is able to load raw files using <code>from_file</code>, all of BEEP's other modules and methods should work with it like they do with any other Datapath/cycler.</p> <p>For example, structuring your BEEPDatapath requires only calling the parent <code>BEEPDatapath</code>'s <code>.structure</code> method.</p> <p>For more info on the capabilities of <code>BEEPDatapath</code>, see the Structuring Tutorial.</p>"},{"location":"Python%20tutorials/advanced_structuring/#advanced-usage","title":"Advanced usage","text":"<p>Your cycler may possess capabilities for data or structuring outside of base <code>BEEPDatapath</code>'s capabilities. In this case, it may be needed to implement additional methods or override <code>BEEPDatapath</code> methods beyond <code>from_file</code>. The specific implementation will depend  on your cycler's capabilities; however, it is recommended not to override the following methods in particular:</p> <ul> <li><code>BEEPDatapath.structure</code></li> <li><code>BEEPDatapath.autostructure</code></li> <li><code>BEEPDatapath.as_dict</code></li> <li><code>BEEPDatapath.from_dict</code></li> </ul> <p>If these methods are overridden in an incompatible way, it is likely they will break further downstream BEEP tasks, such as diagnostic structuring or featurization.</p>"},{"location":"Python%20tutorials/advanced_structuring2/","title":"Advanced Structuring: Diagnostic and Custom Cyles","text":"<p>It is often necessary in cycling experiments to run cycles with more  than standard aging charging or discharging steps. These may include reference  performance testing (RPT), hybrid pulse power characterization (HPPC), or other custom  series of steps. We refer to these as \"diagnostic cycles\".</p> <p>BEEP's core <code>BEEPDatapath</code> object contains logic for interpolating these cycles in a  reproducible way, but you must specify where in the cycler file the diagnostic cycles are. If the locations of the diagnostic cycles are not specified, <code>BEEPDatapath</code> will treat these cycles as regular aging cycles.</p> <p></p>"},{"location":"Python%20tutorials/advanced_structuring2/#how-to-structure-diagnostic-cycles-in-beep","title":"How to structure diagnostic cycles in BEEP","text":"<p>The series of steps for structuring diagnostic cycles is:</p> <ol> <li>Define a <code>DiagnosticConfig</code>; this is an object specifying where diagnostic cycles are located.</li> <li>Set the <code>DiagnosticConfig</code> object as the <code>diagnostic</code> attribute of a <code>BEEPDatapath</code> object.</li> <li>Structure using either <code>BEEPDatapath.stucture(...)</code> or <code>BEEPDatapath.interpolate_diagnostic_cycles(...)</code> (for more granularity.) </li> </ol>"},{"location":"Python%20tutorials/advanced_structuring2/#1-a-defining-a-diagnosticconfig-from-cycle-indices","title":"1. (a) Defining a <code>DiagnosticConfig</code> from cycle indices","text":"<p>The most direct way of specifying a <code>DiagnosticConfig</code> is by simply passing in the locations of the cycle  indices for each type of diagnostic cycle in your file. This is done with a dictionary where the keys are user-defined names of cycles and values are sets of cycle indices. </p> <p>In this example, we'll say there are only HPPC cycles and they're located at cycle indices 1, 12, and 14.</p> <pre><code>from beep.structure.diagnostic import DiagnosticConfig\ndc = DiagnosticConfig(\n{\n\"hppc\": {12, 14, 1}\n}\n)\n</code></pre> <p>For a more complex example, let's say there are several kinds of cycles at various intervals:</p> <pre><code>from beep.structure.diagnostic import DiagnosticConfig\nrpt1_ix = set(range(1, 1002, 200))\nrpt2_ix = set(range(2, 1003, 200))\nhppc1_ix = {12, 512}\nhppc2_ix = {115, 718, 910}\nreset_ix = {0, 1000}\nabnormal_ix = set(range(5, 520, 50))\ndc = DiagnosticConfig(\n{\n\"rpt1\": rpt1_ix,\n\"rpt2\": rpt2_ix,\n\"hppc1\": hppc1_ix,\n\"hppc2\": hppc2_ix,\n\"reset_\": reset_ix,\n\"abnormal\": abnormal_ix\n},\n)\n</code></pre> <p>Note the names of the cycles are user defined, but BEEP will determine a strategy of interpolation if the cycle names contain:</p> <ul> <li><code>\"rpt\"</code>: If found in the cycle name, these cycles will be treated as RPT. E.g., <code>\"rpt_0.2C\"</code> would be interpolated as an RPT cycle.</li> <li><code>\"hppc\"</code>: If found in the cycle name, these cycles will be treated as HPPC. </li> <li><code>\"reset\"</code>: If found in the cycle name, these cycles will be treated as RESET cycles.</li> <li>Any other cycle name will be interpolated on a step-by-step basis on the voltage axis.</li> </ul>"},{"location":"Python%20tutorials/advanced_structuring2/#1-b-defining-a-diagnosticconfig-automatically-using-step-numbers","title":"1. (b) Defining a <code>DiagnosticConfig</code> automatically using step numbers","text":"<p>Specifying individual step numbers can be difficult, especially if you are  working with someone else's file.</p> <p>However, <code>DiagnosticConfig</code> can also be instantiated with a set of heuristics for recognizing  step numbers present in certain cycles but missing in others. For example, if HPPC cycles always contain  the step indices <code>14</code> and <code>16</code> and other cycles never do, we can automatically determine the cycle indices  of the HPPC cycles.</p> <p>We use the <code>DiagnosticConfig.from_step_numbers</code> method to instantiate the object automatically. The <code>matching_critera</code> argument determines a set of \"contains\" or \"exact\" matching rules for each diagnostic cycle type. We will also need the dataframe of raw data.</p> <p>For example, let's say:</p> <ul> <li>Our HPPC cycles always at least contain step numbers 1,2,4,6,8.</li> <li>Our low-rate RPT cycles are EXACTLY (only) step numbers 12 and 13.</li> <li>Our high-rate RPT cycles are EXACTLY (only) step numbers 15 and 16.</li> </ul> <p>We can recognize the cycles automatically:</p> <pre><code>from beep.structure.maccor import MaccorDatapath\nfrom beep.structure.diagnostic import DiagnosticConfig\ndatapath = MaccorDatapath.from_file(\"MyMaccorFile.rar\")\ndc = DiagnosticConfig.from_step_numbers(\ndatapath.raw_data,\nmatching_criteria={\n\"hppc\": (\"contains\", [(1, 2, 4, 6, 8)]),\n\"rpt_lowrate\": (\"exact\", [(12, 13)]),\n\"rpt_highrate\": (\"exact\", [(15, 16)])\n}\n)\n</code></pre>"},{"location":"Python%20tutorials/advanced_structuring2/#1-c-working-with-diagnosticconfig","title":"1. (c) Working with <code>DiagnosticConfig</code>","text":"<p>Once instantiated, <code>DiagnosticConfig</code> objects have some attributes for working  with the cycle indices of each diagnostic cycle type.</p> <ul> <li><code>DiagnosticConfig.all_ix</code> gives the set of all diagnostic cycles, regardless of their type (as long as they are not regular aging cycles)</li> <li><code>DiagnosticConfig.rpt_ix</code> gives the set of all RPT cycles, even those specified at different C-rates. For more info on how RPT cycles are recognized, see Step 1(a) above.</li> <li><code>DiagnosticConfig.hppc_ix</code> gives the set of all HPPC cycles, even those with different parameters.</li> <li><code>DiagnosticConfig.cycles</code> gives a mapping from a cycle type string (e.g., <code>\"rpt_lowrate\"</code>) to the set of it's cycle indices (e.g., <code>{1, 101, 201, ...}</code>)</li> <li><code>DiagnosticConfig.type_by_ix</code> gives a mapping from cycle index (e.g., <code>101</code>) to the cycle type string (e.g., <code>\"rpt_lowrate\"</code>)</li> </ul> <p>Here is an example:</p> <pre><code>from beep.structure.diagnostic import DiagnosticConfig\nrpt1_ix = set(range(1, 1002, 200))\nrpt2_ix = set(range(2, 1003, 200))\nhppc1_ix = {12, 512}\nhppc2_ix = {115, 718, 910}\nreset_ix = {0, 1000}\nabnormal_ix = set(range(5, 520, 50))\ndc = DiagnosticConfig(\n{\n\"rpt1\": rpt1_ix,\n\"rpt2\": rpt2_ix,\n\"hppc1\": hppc1_ix,\n\"hppc2\": hppc2_ix,\n\"reset_\": reset_ix,\n\"abnormal\": abnormal_ix\n},\n)\nprint(\"All diagnostic indices:\", dc.all_ix)\nprint(\"All RPT indices:\", dc.rpt_ix)\nprint(\"All HPPC indices:\", dc.hppc_ix)\nprint(\"RPT1 indices:\", dc.cycles[\"rpt_lowrate\"])\nprint(\"Cycle type of cycle 12:\", dc.type_by_ix[12])\n</code></pre> <pre><code>All diagnostic indices: {0, 1, 2, 5, 12, 55...}\nAll RPT indices: {1, 2, 201, 202, 401, 402...}\nAll HPPC indices: {12, 115, 512, 718, 910}\nRPT lowrate indices: {1, 201, 401, 601,...}\nCycle type of cycle 12:  hppc1\n</code></pre>"},{"location":"Python%20tutorials/advanced_structuring2/#2-set-the-diagnosticconfig-object-to-beepdatapathdiagnostic","title":"2. Set the <code>DiagnosticConfig</code> object to <code>BEEPDatapath.diagnostic</code>","text":"<p>Once <code>DiagnosticConfig</code> is instantiated alongside a datapath,  set the <code>diagnostic</code> attribute of a <code>BEEPDatapath</code> to that object.</p> <pre><code>datapath.diagnostic = diagnostic_config_object\n</code></pre>"},{"location":"Python%20tutorials/advanced_structuring2/#3-interpolate","title":"3. Interpolate!","text":"<p>You can now structure files normally using <code>BEEPDatapath.structure(...)</code> (for a full structuring of both diagnostic and normal cycles) or <code>BEEPDatapath.interpolate_diagnostic_cycles(...)</code> (for diagnostic cycles only).</p> <p>Here is a full example:</p> <pre><code>from beep.structure.novonix import NovonixDatapath\nfrom beep.structure.diagnostic import DiagnosticConfig\nnd = NovonixDatapath.from_file(\"MyNovonixFile.091\")\ndc = DiagnosticConfig(\n{\n\"rpt\": set(range(1, 1002, 200)),\n\"hppc\": {12, 512},\n\"reset\": {0, 1000},\n},\n)\nnd.diagnostic = dc\nnd.structure()\n</code></pre>"}]}